#!/usr/bin/python3
###############################################################################
# Copyright (c) 2016, PulseRain Technology LLC 
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
###############################################################################



import sys, getopt
import math, time

from OCD_8051 import OCD_8051
from ROM_Hex_Format import *
from time import sleep
from CRC16_CCITT import CRC16_CCITT
import serial

from Console_Input import Console_Input

##############################################################################
# High Speed Configuration Tool for the M10 board
##############################################################################


###############################################################################
# The dummy console here is pretty much a derivative of OCD_Console.
# The reason is that we need to turn the M10_high_speed_config.py into .exe file.
# However, function list is not well supported by the existing conversion tool.
# The dummy console here thus removed the function list
###############################################################################

class dummy_console:

##############################################################################
# built-in firmware for FP51 core
##############################################################################

    _FP51_CONFIG_FIRMWARE = [
        ":04000000020069325F",
        ":01000B0032C2",
        ":0100130032BA",
        ":03001B00022C4173",
        ":0100230032AA",
        ":03002B00022DDAC9",
        ":03003300022D811A",
        ":0300DC00020036E9",
        ":030036000200DFE6",
        ":0800DF00121A39121B0180FB0B",
        ":0E00CE009003DDE4F09003DEF09003EDE4F02B",
        ":2000E700AF82AE83ADF0FC90010AEFF0EEA3F0EDA3F0ECA3F090010AE0FCA3E0FDA3E0FE8C",
        ":20010700A3E0FF30E73C75822D121ECF90010AE0FCA3E0FDA3E0FEA3E0FF90010AECF4F07B",
        ":20012700EDF4A3F0EEF4A3F0EFF4A3F090010AE02401F0A3E03400F0A3E03400F0A3E034C4",
        ":2001470000F090010EE4F090010EE0240FF508E43401F50990010AE0FAA3E0FBA3E0FCA35A",
        ":20016700E0FD9003F0740AF0E4A3F0A3F0A3F0C000E534F82404F534EDF208ECF208EBF241",
        ":2001870008EAF2D0008A828B838CF0ED121B04A882C000A83418E2FA18E2FB18E2FC18E251",
        ":2001A700FD8834D000850882850983E8F0900401740AF0E4A3F0A3F0A3F08A828B838CF081",
        ":2001C700ED121CFDAC82AD83AEF0FF90010AECF0EDA3F0EEA3F0EFA3F090010AE0F5F0A308",
        ":2001E700E042F0A3E042F0A3E045F0601190010EE02401F0E0FFBF0A00500302014E900197",
        ":200207000EE0FF240FF582E43401F583E0FEC000EFA8340534F2D0008E82121FFCAE82A836",
        ":200227003418E2FF1534C000EFA8340534F2D0008E82121ECFA83418E2FF1534EFFE1490FD",
        ":20024700010EF0EE70B822AF82AE83ADF0FC900119EFF0EEA3F0EDA3F0ECA3F090011DE4CA",
        ":20026700F090011DE0241EFFE43401FE900119E0FAA3E0FBA3E0FCA3E0FD8A0153010F8F23",
        ":20028700828E83E9F0EBC4CAC4540F6ACA540FCA6ACAFBECC454F04BFBEDC4CCC4540F6C71",
        ":2002A700CC540FCC6CCCFD900119EAF0EBA3F0ECA3F0EDA3F0900119E0F5F0A3E042F0A33F",
        ":2002C700E042F0A3E045F0600E90011DE02401F0E0FFBF0800408A90011DE0FF241EF58286",
        ":2002E700E43401F583E0FEC000EFA8340534F2D0008E82121FFCAE82A83418E2FF1534C0B7",
        ":2003070000EFA8340534F2D0008E82121ECFA83418E2FF1534EFFE1490011DF0EE70B8220C",
        ":20032700AF82AE83ADF0FC900126EFF0EEA3F0EDA3F0ECA3F090012AE4F090012AE0242B2C",
        ":20034700FFE43401FE900126E0FAA3E0FBA3E0FCA3E0FD8A015301078F828E83E9F0EBC4E2",
        ":2003670023CAC423541F6ACA541FCA6ACAFBECC42354E04BFBEDC423CCC423541F6CCC54BC",
        ":200387001FCC6CCCFD900126EAF0EBA3F0ECA3F0EDA3F0900126E0F5F0A3E042F0A3E04232",
        ":2003A700F0A3E045F0601190012AE02401F0E0FFBF0B00500302034190012AE0FF242BF54D",
        ":2003C70082E43401F583E0FEC000EFA8340534F2D0008E82121FFCAE82A83418E2FF153414",
        ":2003E700C000EFA8340534F2D0008E82121ECFA83418E2FF1534EFFE1490012AF0EE70B881",
        ":2004070022AF82AE83ADF0FC900136EFF0EEA3F0EDA3F0ECA3F090013AE4F090013AE02424",
        ":200427003BFFE43401FE900136E0FAA3E0FBA3E0FCA3E0FD8A015301018F828E83E9F0ED7E",
        ":20044700C313FDEC13FCEB13FBEA13FA900136F0EBA3F0ECA3F0EDA3F0900136E0F5F0A374",
        ":20046700E042F0A3E042F0A3E045F0600E90013AE02401F0E0FFBF200040A090013AE0FF80",
        ":20048700243BF582E43401F583E0FEC000EFA8340534F2D0008E82121FFCAE82A83418E247",
        ":2004A700FF1534C000EFA8340534F2D0008E82121ECFA83418E2FF1534EFFE1490013AF07E",
        ":2004C700EE70B822A8340534C533F208E8C5330534053405340534AF82AE83ADF0FCA8333C",
        ":2004E700EFF208EEF208EDF208ECF2A8331818E2FFBF0117A833E2FC08E2FD08E2FE08E22A",
        ":200507008C828D838EF01204088055A8331818E2FFBF0317A833E2FC08E2FD08E2FE08E20E",
        ":200527008C828D838EF012024E8035A8331818E2FFBF0217A833E2FC08E2FD08E2FE08E2CB",
        ":200547008C828D838EF01203278015A833E2FC08E2FD08E2FE08E28C828D838EF01200E720",
        ":20056700C533F818E2C533883422A8340534C533F208E8C5330534053405340534AF82AE0A",
        ":2005870083ADF0FCA833EFF208EEF208EDF208ECF2A833E2FC08E2FD08E2FE08E2FFA8337B",
        ":2005A7001818A9340534E2F3098C828D838EF0EF1204CB153475820A121ECFC533F818E271",
        ":2005C700C533883422AFF0AE83E58290015DF0EEA3F0EFA3F090015BE0F5F0A3E045F0605D",
        ":2005E7004B90015BE0F5F0A3E045F070012290015DE0FDA3E0FEA3E0FF8D828E838FF0122E",
        ":2006070030F1FC90015D74012DF0E43EA3F0EFA3F08C82121ECF90015BE024FFFEA3E0344E",
        ":20062700FFFF90015BEEF0EFA3F080B590015DE0FDA3E0FEA3E0FF8D828E838FF01230F194",
        ":20064700602A90015DE0FDA3E0FEA3E0FF8D828E838FF01230F1FC90015D74012DF0E43ECB",
        ":20066700A3F0EFA3F08C82121ECF80C022A8340534C533F208E8C533053405340534AFF0BE",
        ":20068700AE83E582A833F208EEF208EFF2A833E2FD08E2FE08E2FFE53324FDF8E2FB08E29A",
        ":2006A700FC90015BEBF0ECA3F08D828E838FF01205CCC533F818E2C533883422E5829001B7",
        ":2006C70060F09004CDE0FCA3E0FDA3E0FEA3E0FF8D0A8E0B8F0C750D00900160E0F8E4F910",
        ":2006E700FAFBE50A6200E50B6201E50C6202E50D62038E078D068C05E4FCF9FAFBE828F81F",
        ":20070700E933F9EA33FAEB33FBE828F8E933F9EA33EB33E824D1F582E93404F583E0F8A3CD",
        ":20072700E0F9A3E0FAA3E0FB9004CDE86CF0E96DA3F0EA6EA3F0EB6FA3F09004CDE0FCA398",
        ":20074700E0FDA3E0A3E09004CDECF0EDA3F0E4A3F0A3F022AFF0AE83E582900165F0EEA318",
        ":20076700F0EFA3F09004CD74FFF0A3F0E4A3F0A3F0900168F0A3F0A3F0A3F0900165E0F532",
        ":200787000EA3E0F50FA3E0F510900161E0F9A3E0FAA3E0FBA3E0FC900168E0F8A3E0FDA3FC",
        ":2007A700E0FEA3E0FFC3E899ED9AEE9BEF9C4003020838C001C002C003C004900168E0F893",
        ":2007C700A3E0FAA3E0FBA3E0FCE8250EF9EA350FFEAF1089828E838FF01230F1F9C000E52D",
        ":2007E70034F82405F534ECF208EBF208EAF208E9F208D0E0C0E0F2D00089821206C3A8340E",
        ":2008070018E2C0E018E218E2FA18E2FB18E2FC8834D000900168740128F0E43AA3F0E43B7C",
        ":20082700A3F0E43CA3F0D004D003D002D00102079E9004CDE0FCA3E0FDA3E0A3E09004CD56",
        ":20084700ECF0EDA3F0E4A3F0A3F022E58290016CF0E0FF74F05FC4540FFE53070FEFC4547E",
        ":20086700F090016C4EF0E0FF74CC5F0303543FFE530733EF2F25E090016C4EF0E0FF74AA49",
        ":200887005FC313FE530755EF2F90016C4EF0E0F58222AF82AE83ADF0FC90016DEFF0EEA334",
        ":2008A700F0EDA3F0ECA3F09001727401F0E4A3F0A3F0A3F0900176F0A3F0A3F0A3F09001FC",
        ":2008C70071F090016DE0FCA3E0FDA3E0FEA3E0FF8C03C000E534F82404F534EFF208EEF2D9",
        ":2008E70008EDF208ECF2D0008B82120852858211A83418E2FC18E2FD18E2FE18E2FF88344D",
        ":20090700900172E0F512A3E0F513A3E0F514A3E0F515A81179007A007B009004B2E512F0EE",
        ":20092700E513A3F0E514A3F0E515A3F0C000E534F82404F534EFF208EEF208EDF208ECF254",
        ":20094700D000888289838AF0EB122E4E85821685831785F018F519A83418E218E2FD18E219",
        ":20096700FE18E2FF8834900176E0F8A3E0F9A3E0FAA3E0FB900176E51628F0E51739A3F085",
        ":20098700E5183AA3F0E5193BA3F0AB14AA13A9127800900172E8F0E9A3F0EAA3F0EBA3F0B9",
        ":2009A7008D048E058F067F0090016DECF0EDA3F0EEA3F0EFA3F0900171E02401F0E0FFBF06",
        ":2009C700040050030208C9900176E0FCA3E0FDA3E0FEA3E08C828D838EF022900320E4F03A",
        ":2009E700A3F0900320E0FEA3E0FFEE2493F582EF3402F583E4F0900320042EF0E43FA3F032",
        ":200A0700900320E0FEA3E0FFC3EE940CEF940040D122E5829003B2F0903127E493FEA3E435",
        ":200A270093FF9003B2E0FDFB7C00C000E534F82403F534EFF208EEF208EDF2D000A8340502",
        ":200A4700340534EBF208ECF208120A55800BC006C00790032275F0002215341534A834180C",
        ":200A6700E2FD18E218E28834900161EDF0E4A3F0A3F0A3F090032275F00012075B9004CD85",
        ":200A8700E0A3E0FDA3E0A3E07C009003B3EDF0903127E493FEA3E493FFC000A834053405FA",
        ":200AA70034EFF208EEF2D000A834053405347401F208E4F208120AC1800BC006C00790033F",
        ":200AC700B375F0002215341534A83418E218E288349004CDE0FCA3E0FDA3E0A3E09003B3AE",
        ":200AE700ECF0903127E493FEA3E493FFC000A83405340534EFF208EEF2D000A834053405DC",
        ":200B0700347401F208E4F208120B14800BC006C0079003B375F0002215341534A83418E2CF",
        ":200B270018E288342275E502758214122D109003B4E5E1F09003B5E5E2F09003B6E5E3F023",
        ":200B47009003B7E5E4F0E0FC7F007E007D009003B6E0F8790089038802E4F92FFFE93EFE55",
        ":200B6700EA3DFDEB3CFC9003B5E0F879007A008A0389028801E42FFFE93EFEEA3DFDEB3CF1",
        ":200B8700FC9003B4E0F8E4F9FAFBE82FFFE93EFEEA3DFDEB3C8F828E838DF02275E1FF7550",
        ":200BA700E2FF75E3FF75E4FF75E505758214022D10AF83E5829003BCF0EFA3F09003227472",
        ":200BC7005AF090032375F000F4122E3390032475F0007401122E3390032575F00074341267",
        ":200BE7002E339003BCE0FEA3E0FD90032675F000ED122E3390032775F000EE122E3390034F",
        ":200C0700B8E0FCA3E0FDA3E0FEA3E0FB90032875F000EB122E338E0390032975F000EB128D",
        ":200C27002E338D0390032A75F000EB122E3390032B75F000EC122E33903127E493FEA3E4D6",
        ":200C470093FFC000A83405340534EFF208EEF2D000A83405340534740AF208E4F208120C92",
        ":200C67006A800BC006C00790032275F0002215341534A83418E218E28834900161740AF031",
        ":200C8700E4A3F0A3F0A3F090032275F00012075B9004CDE0A3E0FDA3E0A3E07C009003BE8E",
        ":200CA700EDF0903127E493FEA3E493FFC000A83405340534EFF208EEF2D000A83405340519",
        ":200CC700347401F208E4F208120CD4800BC006C0079003BE75F0002215341534A83418E242",
        ":200CE70018E288349004CDE0FCA3E0FDA3E0A3E09003BEECF0903127E493FEA3E493FFC011",
        ":200D070000A83405340534EFF208EEF2D000A834053405347401F208E4F208120D27800B79",
        ":200D2700C006C0079003BE75F0002215341534A83418E218E2883422E5829003BFF0E0FF7F",
        ":200D4700FD7E0074162DFDE43E8DF005F07D017E007C007B00800CED2DFDEE33FEEC33FCF9",
        ":200D6700EB33FBD5F0F19003C0EDF4F0EEF4A3F0ECF4A3F0EBF4A3F0BF030280089003BF81",
        ":200D8700E0FFBF04209003C0E0FCA3E0FDA3E0FEA3E0FF9003C0ECF0EDA3F0EEA3F074F93B",
        ":200DA7005FA3F080209003C0E0FCA3E0FDA3E0FEA3E0FF9003C0ECF0EDA3F0747F5EA3F055",
        ":200DC70074FE5FA3F09003C0E0FCA3E0FDA3E0FEA3E0FF8CE18DE28EE38FE475E505C00017",
        ":200DE700E534F82404F534EFF208EEF208EDF208ECF2D000758214122D10A83418E2FC18E0",
        ":200E0700E2FD18E2FE18E2FF88349003BFE0F879008802E9C454F0CAC4CA6ACA54F0CA6A1D",
        ":200E270078FF79FF43028F7BFF9003C0E85CF0E95DA3F0EA5EA3F0EB5FA3F09003C0E0FC27",
        ":200E4700A3E0FDA3E0FEA3E0FF8CE18DE28EE38FE475E505758214022D10AF82AE83ADF0A0",
        ":200E6700FC9003C9EFF0EEA3F0EDA3F0ECA3F09003C4E0FEA3E0FF9003C9E0FAA3E0FBA3A6",
        ":200E8700E0FCA3E0FD8E008F017E007F009003D1E82AF0E93BA3F0EE3CA3F0EF3DA3F090AB",
        ":200EA70003C6E0FDA3E0FEA3E0FF8D828E838FF0745A122E339003C674012DF0E43EA3F002",
        ":200EC700EFA3F09003C6E0FDA3E0FEA3E0FF8D828E838FF074A5122E339003C674012DF03A",
        ":200EE700E43EA3F0EFA3F09003C6E0FDA3E0FEA3E0FF8D828E838FF07401122E339003C69B",
        ":200F07002DF0E43EA3F0EFA3F09003D1E0FCA3E0FDA3E0FEA3E0FF9003C9E0F8A3E0F9A360",
        ":200F2700E0FAA3E0FBC3E89CE99DEA9EEB9F4001229003C9E0F8A3E0F9A3E0FAA3E0C3138A",
        ":200F4700FBEA13FAE913F9E813F8EBC313FBEA13FAE913F9E813F888E189E28AE38BE475F0",
        ":200F6700E540C000E534F82404F534EFF208EEF208EDF208ECF2D000758214122D10A83487",
        ":200F870018E2FC18E2FD18E2FE18E2FF88349003CDE5E5F0C000E534F82404F534EFF2088B",
        ":200FA700EEF208EDF208ECF2D000758204122D10A83418E2FC18E2FD18E2FE18E2FF8834ED",
        ":200FC7009003CDE0FB30E4C6C004C005C006C0079003CDE5E1F09003CEE5E2F09003CFE56A",
        ":200FE700E3F09003D0E5E4F09003CDE0FBC000E534F82404F534EFF208EEF208EDF208ECFA",
        ":20100700F2D0008B82120852AB82A83418E2FC18E2FD18E2FE18E2FF88349003CEE0FAC0F0",
        ":2010270000E534F82405F534EFF208EEF208EDF208ECF208EBF2D0008A82120852AA82A8AF",
        ":201047003418E2FB18E2FC18E2FD18E2FE18E2FF88349003CFE0F9C000E534F82406F53467",
        ":20106700EFF208EEF208EDF208ECF208EBF208EAF2D0008982120852A982A83418E2FA18B0",
        ":20108700E2FB18E2FC18E2FD18E2FE18E2FF88349003D0E0F8C000E534F82407F534EFF291",
        ":2010A70008EEF208EDF208ECF208EBF208EAF208E9F2D0008882120852A882C000A83418A4",
        ":2010C700E2F918E2FA18E2FB18E218E218E218E28834D0009003C6E0FDA3E0FEA3E0FF8D0B",
        ":2010E700828E838FF0E8122E339003C674012DF0E43EA3F0EFA3F09003C6E0FDA3E0FEA300",
        ":20110700E0FF8D828E838FF0E9122E339003C674012DF0E43EA3F0EFA3F09003C6E0FDA3F3",
        ":20112700E0FEA3E0FF8D828E838FF0EA122E339003C674012DF0E43EA3F0EFA3F09003C6D1",
        ":20114700E0FDA3E0FEA3E0FF8D828E838FF0EB122E339003C674012DF0E43EA3F0EFA3F089",
        ":201167009003C6E0FDA3E0FEA3E0FF74B2C0E07403C0E0E4C0E08D828E838FF012003B15CD",
        ":201187008115811581D007D006D005D004400D9003C67422F07403A3F0E4A3F09003C9E05C",
        ":2011A700F8A3E0F9A3E0FAA3E0FB9003C9740428F0E439A3F0E43AA3F0E43BA3F0020F1E8B",
        ":2011C700AF82AE83ADF0FC9003D7EFF0EEA3F0EDA3F0ECA3F09003D7E0FCA3E0FDA3E0FEFD",
        ":2011E700A3E0FFC313FBEE13FAED13F9EC13F8EBC313FBEA13FAE913F9E813F888E189E23B",
        ":201207008AE38BE475E511C000E534F82404F534EFF208EEF208EDF208ECF2D000758214ED",
        ":20122700122D10A83418E2FC18E2FD18E2FE18E2FF88349003D5E0FAA3E0FB8A008B01E428",
        ":20124700FAE9CAC40354F8CAC403CA6ACA54F8CA6AFBE8C40354F8F9E8C40354074AFAE497",
        ":20126700F82CFCE93DFDEA3EFEEB3FC313FFEE13FEED13FDEC13FCEFC313FFEE13FEED1345",
        ":20128700FDEC13FC1CBCFF091DBDFF051EBEFF011F8CE18DE28EE38FE475E521758214123E",
        ":2012A7002D1075E509758214022D10E5829003DCF09003DBE060089003DDE4F00209E29000",
        ":2012C70003DCE0FFE4BFA50104F51ABF0103EF8001E4FDE4BF5A0104F51B9003DFE4F090F1",
        ":2012E70003DDE0FB24FA50030219B5EB2B2B9012F97302130B02134F02137702139E0213C4",
        ":20130700E602142290031FE4F0E51B70030219B59003DD7401F0C000A83405340534EFF21B",
        ":2013270008EDF2D0001209E2A83418E2FD18E2FF883490031FE0FB04F0EB2493F582E434B8",
        ":2013470002F583EFF00219B5E51A601C9003DD7402F090031FE0FB04F0EB2493F582E4345A",
        ":2013670002F583EFF00219B59003DDE4F00219B5ED601C9003DD7403F090031FE0FB04F068",
        ":20138700EB2493F582E43402F583EFF00219B59003DDE4F00219B590031FE0FB04F0EB2448",
        ":2013A70093F582E43402F583EFF0900296E09003DEF090031FE0FBBB0C0280030219B59009",
        ":2013C70003DEE0FBBB39099003DD7404F00219B59003DD7405F09003DF7401F00219B59095",
        ":2013E700031FE0FB04F0EB2493F582E43402F583EFF090031FE0FBBB8A0280030219B590B4",
        ":2014070003DEE0FBBB390280030219B59003DD7405F09003DF7401F00219B59003DEE0FBF4",
        ":20142700BB39499001617488F0E4A3F0A3F0A3F0C000A83405340534EFF208EDF2D00090B7",
        ":20144700029375F00012075BA83418E2FD18E2FF883490031BE0FA7B0090031CE0F879008C",
        ":201467009003E0E82BF0E93AA3F08047900161740AF0E4A3F0A3F0A3F0C000A8340534059B",
        ":2014870034EFF208EDF2D00090029375F00012075BA83418E2FD18E2FF883490029DE0FAEA",
        ":2014A7007B0090029EE0F879009003E0E82BF0E93AA3F0C005900297E0FB9003E2F090023D",
        ":2014C70099E0FA8A1C751D00751E00751F00851C2375200075210075220090029AE0F9891F",
        ":2014E70024752500752600752700AE25AD24E4FC2520F520EC3521F521ED3522F522EE353C",
        ":2015070023F52390029BE0F879007D008D0689058801E42520F520E93521F521ED3522F518",
        ":2015270022EE3523F52390029CE0FA7C007D007E009003E3EA2520F0EC3521A3F0ED3522F7",
        ":20154700A3F0EE3523A3F08B027E008A238E208E218E22900298E0F9F87C008C068805E4D9",
        ":20156700FC2520F520EC3521F521ED3522F522EE3523F523AE1EAD1DAC1CE42520FAEC355B",
        ":2015870021FCED3522FDEE3523FE9003E7E5242AF0E5253CA3F0E5263DA3F0E5273EA3F074",
        ":2015A7008B067B007D009003EBE92BF0ED3EA3F09003DDE4F09003DEE0C313F09003E0E0AD",
        ":2015C700FDA3E0FE9004CDE0F524A3E0F525A3E0F526A3E0F5278D008E04E4FDFEE8B52493",
        ":2015E7000EECB5250AEDB52606EEB527028005D0050219B5D0059003DEE0FEBE4502800396",
        ":201607000216B0C005900105E0FE7C008E278C248C258C26900106E0F8790089068805E496",
        ":20162700F92524F524E93525F525ED3526F526EE3527F527900107E0FA7B007C008C068B9C",
        ":20164700048A03E42524F524EB3525F525EC3526F526EE3527F527900108E0F8E4F9FDFE3C",
        ":20166700E82524F8E93525F9ED3526FDEE3527FE900109E0FC7B009003B8E8F0E9A3F0EDF4",
        ":20168700A3F0EEA3F0C000A83405340534EFF208EDF2D0008C828B83120BB8A83418E218AA",
        ":2016A700E2FF8834D0050219B59003DEE0FEBE47028003021755C005900101E0FE7C008E5B",
        ":2016C700278C248C258C26900102E0F8790089068805E4F92524F524E93525F525ED3526E5",
        ":2016E700F526EE3527F527900103E0FA7B007C008C068B048A03E42524F524EB3525F525AA",
        ":20170700EC3526F526EE3527F527900104E0F879007D007E009003B8E82524F0E93525A3C7",
        ":20172700F0ED3526A3F0EE3527A3F0C000A83405340534EFF208EDF2D000900B01120BB8E3",
        ":20174700A83418E218E2FF8834D0050219B59003DEE0FEBE330280030217E69003E3E0FA3E",
        ":20176700A3E0FBA3E0FCA3E0FE9003EBE0F8A3E0F99003C4E8F0E9A3F09003C67422F07414",
        ":2017870003A3F0E4A3F0C000E534F82404F534EFF208EDF208E9F208D0E0C0E0F2D0008AC4",
        ":2017A700828B838CF0EE120E61A83418E2C0E018E218E2FD18E2FF8834D000080808C000E3",
        ":2017C700A83405340534EFF208EDF2D0008882120A19A83418E2FD18E2FF88340219B590F5",
        ":2017E70003DEE0FEBE37769003E2E0FEC000A83405340534EFF208EDF2D0008E82120D3F51",
        ":20180700A83418E2FD18E2FF8834C000A83405340534EFF208EDF2D000120B2CAA82AB83F0",
        ":20182700ACF0FEA83418E2FD18E2FF88349003B8EAF0EBA3F0ECA3F0EEA3F0C000A834053B",
        ":20184700340534EFF208EDF2D000901234120BB8A83418E2FD18E2FF88340219B59003DE08",
        ":20186700E0FEBE3953C000A83405340534EFF208EDF2D000120B2CAA82AB83ACF0FEA8347A",
        ":2018870018E2FD18E2FF88349003B8EAF0EBA3F0ECA3F0EEA3F0C000A83405340534EFF203",
        ":2018A70008EDF2D000901234120BB8A83418E2FD18E2FF88340219B59003DEE0FEBE315ACF",
        ":2018C700C000A83405340534EFF208EDF2D000120BA3A83418E2FD18E2FF88349003E7E0B9",
        ":2018E700FAA3E0FBA3E0FCA3E0FE9003B8EAF0EBA3F0ECA3F0EEA3F0C000A83405340534B8",
        ":20190700EFF208EDF2D00090ABCD120BB8A83418E2FD18E2FF88340219B59003DEE0FEBEE6",
        ":201927005E0280030219B59003E3E0FAA3E0FBA3E0FCA3E0FE9003EBE0F8A3E0F99003D5E5",
        ":20194700E8F0E9A3F0C000E534F82406F534EFF208EEF208EDF208ECF208EBF208EAF2D0D9",
        ":20196700008A828B838CF0EE1211C7A83418E2FA18E2FB18E2FC18E2FD18E2FE18E2FF88C7",
        ":20198700349003B8EAF0EBA3F0ECA3F0EEA3F0C000A83405340534EFF208EDF2D00090CD66",
        ":2019A700EF120BB8A83418E2FD18E2FF88349003DFE060030212E1229003EDE0FF6005BF85",
        ":2019C700016980139003DB7401F07582001212B29003ED7401F022903119E493FEA3E493F3",
        ":2019E700FFC000EFA8340534F2D0008E828F83120039AE82A83418E2FF1534EE603390315E",
        ":201A070023E493FEA3E493FFC000EFA8340534F2D0008E828F83120039AE82A83418E21500",
        ":201A2700349003DBE4F08E820212B29003ED7401F022903117E493FEA3E493FFC000A8344A",
        ":201A470005340534EFF208EEF2D000121A57800CC006C00790100075F00EE422A83418E2E9",
        ":201A670018E288349003E8E4F5F012258F903119E493FEA3E493FFC000EFA8340534F2D0B1",
        ":201A8700008E828F83120039AE82A83418E2FF1534EE602C903123E493FEA3E493FFC000D8",
        ":201AA700A83405340534EFF208EEF2D0008E828F83120039A83418E2FE18E2FF883480AD15",
        ":201AC70075EDFF009003EFE4F09003EEE5EDF0009003EFE0FF2401FDE43401FE9003EEE00A",
        ":1D1AE700FC8D828E83F09003EFEF04F0E0FFBF080040D6900109E5E6F0220219BF64",
        ":06311100CB0471057406F9",
        ":20312D00FFFF00000000000021100000422000006330000084400000A5500000C66000007F",
        ":20314D00E770000008810000299100004AA100006BB100008CC10000ADD10000CEE1000047",
        ":20316D00EFF1000031120100100201007332010052220100B552010094420100F7720100A7",
        ":20318D00D662010039930100188301007BB301005AA30100BDD301009CC30100FFF301006F",
        ":2031AD00DEE3010062240200433402002004020001140200E6640200C7740200A44402008F",
        ":2031CD00855402006AA502004BB502002885020009950200EEE50200CFF50200ACC5020097",
        ":2031ED008DD5020053360300722603001116030030060300D7760300F66603009556030037",
        ":20320D00B44603005BB703007AA703001997030038870300DFF70300FEE703009DD70300BE",
        ":20322D00BCC70300C4480400E558040086680400A77804004008040061180400022804009E",
        ":20324D0023380400CCC90400EDD904008EE90400AFF9040048890400699904000AA90400E6",
        ":20326D002BB90400F55A0500D44A0500B77A0500966A0500711A0500500A0500333A050046",
        ":20328D00122A0500FDDB0500DCCB0500BFFB05009EEB0500799B0500588B05003BBB05000E",
        ":2032AD001AAB0500A66C0600877C0600E44C0600C55C0600222C0600033C0600600C0600AE",
        ":2032CD00411C0600AEED06008FFD0600ECCD0600CDDD06002AAD06000BBD0600688D060036",
        ":2032ED00499D0600977E0700B66E0700D55E0700F44E0700133E0700322E0700511E0700D6",
        ":20330D00700E07009FFF0700BEEF0700DDDF0700FCCF07001BBF07003AAF0700599F07005D",
        ":20332D00788F070088910800A9810800CAB10800EBA108000CD108002DC108004EF10800E6",
        ":20334D006FE1080080100800A1000800C2300800E32008000450080025400800467008003B",
        ":20336D0067600800B983090098930900FBA30900DAB309003DC309001CD309007FE309004F",
        ":20338D005EF30900B102090090120900F3220900D232090035420900145209007762090063",
        ":2033AD0056720900EAB50A00CBA50A00A8950A0089850A006EF50A004FE50A002CD50A00F7",
        ":2033CD000DC50A00E2340A00C3240A00A0140A0081040A0066740A0047640A0024540A008B",
        ":2033ED0005440A00DBA70B00FAB70B0099870B00B8970B005FE70B007EF70B001DC70B00DF",
        ":20340D003CD70B00D3260B00F2360B0091060B00B0160B0057660B0076760B0015460B00B2",
        ":20342D0034560B004CD90C006DC90C000EF90C002FE90C00C8990C00E9890C008AB90C0006",
        ":20344D00ABA90C0044580C0065480C0006780C0027680C00C0180C00E1080C0082380C00DA",
        ":20346D00A3280C007DCB0D005CDB0D003FEB0D001EFB0D00F98B0D00D89B0D00BBAB0D00EE",
        ":20348D009ABB0D00754A0D00545A0D00376A0D00167A0D00F10A0D00D01A0D00B32A0D0002",
        ":2034AD00923A0D002EFD0E000FED0E006CDD0E004DCD0E00AABD0E008BAD0E00E89D0E0016",
        ":2034CD00C98D0E00267C0E00076C0E00645C0E00454C0E00A23C0E00832C0E00E01C0E002A",
        ":2034ED00C10C0E001FEF0F003EFF0F005DCF0F007CDF0F009BAF0F00BABF0F00D98F0F007E",
        ":20350D00F89F0F00176E0F00367E0F00554E0F00745E0F00932E0F00B23E0F00D10E0F0051",
        ":08352D00F01E0F000000000079",
        ":201B0400AF82AE83ADF0FC9003F4EFF0EEA3F0EDA3F0ECA3F09003F4E0FCA3E0FDA3E0FE7C",
        ":201B2400A3E0FF30E70FC3E49CF8E49DF9E49EFAE49FFB80088C008D018E028F039003F003",
        ":201B4400E0FCA3E0FDA3E0FEA3E0FF30E713C3E49CF528E49DF529E49EF52AE49FF52B8035",
        ":201B6400088C288D298E2A8F2B9003F8E528F0E529A3F0E52AA3F0E52BA3F0888289838A6F",
        ":201B8400F0EB121BBCAC82AD83AEF0FF9003F4E0F8A3E0F9A3E0FAA3E0FB30E713C3E49C3F",
        ":181BA400F8E49DF9E49EFAE49F888289838AF0228C828D838EF0EF2259",
        ":201BBC00AF82AE83ADF0FC9003FCEFF0EEA3F0EDA3F0ECA3F0900400E4F09003FCE0FCA3AA",
        ":201BDC00E0FDA3E0FEA3E0FF7B009003F8E0F536A3E0F537A3E0F538A3E0F539235401FA76",
        ":201BFC007074C003E5362536F8E53733F9E53833FAE53933FB9003F8E8F0E9A3F0EAA3F07A",
        ":201C1C00EBA3F09003F8E0F536A3E0F537A3E0F538A3E0F539C3EC9536ED9537EE9538EFA7",
        ":201C3C009539D0035027E539C313F539E53813F538E53713F537E53613F5369003F8F0E5DD",
        ":201C5C0037A3F0E538A3F0E539A3F080090B900400EBF0021BE6900400E0FF9003FCE0FB5A",
        ":201C7C00A3E0FCA3E0FDA3E0FE9003F8E0F536A3E0F537A3E0F538A3E0F539C3EB9536ECBD",
        ":201C9C009537ED9538EE953940179003FCEBC39536F0EC9537A3F0ED9538A3F0EE9539A3A0",
        ":201CBC00F09003F8E0FBA3E0FCA3E0FDA3E0C313FEED13FDEC13FCEB13FB9003F8F0ECA361",
        ":201CDC00F0EDA3F0EEA3F08F061FEE708E9003FCE0FCA3E0FDA3E0FEA3E08C828D838EF0CC",
        ":011CFC0022C5",
        ":201CFD00AF82AE83ADF0FC900405EFF0EEA3F0EDA3F0ECA3F0900405E0FCA3E0FDA3E0FE5E",
        ":201D1D00A3E0FF30E70FC3E49CF8E49DF9E49EFAE49FFB80088C008D018E028F03900401F6",
        ":201D3D00E0FCA3E0FDA3E0FEA3E0FF33E433F52C6013C3E49CF52DE49DF52EE49EF52FE4B6",
        ":201D5D009FF53080088C2D8D2E8E2F8F30900409E52DF0E52EA3F0E52FA3F0E530A3F0880E",
        ":201D7D008289838AF0EB121DBDAC82AD83AEF0FF900405E0F8A3E0F9A3E0FAA3E0FB33E46D",
        ":201D9D0033652C6013C3E49CF8E49DF9E49EFAE49F888289838AF0228C828D838EF0EF22DC",
        ":201DBD00AF82AE83ADF0FC90040DEFF0EEA3F0EDA3F0ECA3F0900411E4F0A3F0A3F0A3F0D9",
        ":201DDD00900409E0FCA3E0FDA3E0FEA3E0FF75362090040DE0F8A3E0F9A3E0FAA3E0FB909F",
        ":201DFD000415235401F0E828F8E933F9EA33FAEB33FB90040DE8F0E9A3F0EAA3F0EBA3F008",
        ":201E1D00900411E0F8A3E0F9A3E0FAA3E0FBE828F8E933F9EA33FAEB33FB900411E8F0E9FE",
        ":201E3D00A3F0EAA3F0EBA3F0900415E0601E900411E0F8A3E0F9A3E0FAA3E0FB90041174E3",
        ":201E5D000148F0E9A3F0EAA3F0EBA3F0900411E0F8A3E0F9A3E0FAA3E0FBC3E89CE99DEA0A",
        ":201E7D009EEB9F4031900411E8C39CF0E99DA3F0EA9EA3F0EB9FA3F090040DE0F8A3E0F98A",
        ":201E9D00A3E0FAA3E0FB90040D740148F0E9A3F0EAA3F0EBA3F0D536028003021DEE900434",
        ":121EBD000DE0FCA3E0FDA3E0FEA3E08C828D838EF022E8",
        ":06009E00E4787FF6D8FDB6",
        ":201ECF00E582900416F0E0F5F80022E582900418F0E0FFC423541FFE900419F074075FF55D",
        ":201EEF00F005F07401800225E0D5F0FB90041AF0EE7015900417E0600790041AE042F1224C",
        ":201F0F0090041AE0F452F122900419E0FFBF0115900417E0600790041AE042F22290041AE6",
        ":201F2F00E0F4FF52F222E58290041CF0E0FFC423541FFE90041DF074075FF5F005F0740151",
        ":201F4F00800225E0D5F0FB90041EF0EE701590041BE0600790041EE042802290041EE0F424",
        ":201F6F0052802290041DE0FFBF011590041BE0600790041EE042902290041EE0F4FF529016",
        ":201F8F0022E58290041FF0E0FFC423541FFE900420F074075FF5F005F07401800225E0D5A6",
        ":201FAF00F0FB900421F0EE7012900421E0FF558060047F0180027F008F8222900420E0FFFE",
        ":201FCF00BF0112900421E0FF559060047F0180027F008F82227582FF22E582900422F0C2A8",
        ":201FEF009C900422E0F59910990280FB22E582900423F0E0FFBF0A005009900423E02430D0",
        ":20200F00F58222900423E024F62441F58222E582900424F0E0FF30E71175822D121FE89086",
        ":20202F000424E0FFF4F0E02401F0900424E0FFC2D575F064EF30E704B2D5F4048430D502A6",
        ":20204F00F404FF900425F0EF600C900425E0F582121FFC121FE8900424E0FF3395E0FE9053",
        ":20206F000425E075F064A4D39FF4B3FFEE95F0FE9004C2740AF0E4A3F08F828E83122FCFE5",
        ":20208F00AE82AF83900425EEF0E0600C900425E0F582121FFC121FE8900424E0FF75F00A90",
        ":2020AF00C2D530E704D2D5F40484E5F030D502F404F582121FFC021FE8AF82AE83ADF0FCC0",
        ":2020CF00900426EFF0EEA3F0EDA3F0ECA3F0900426E0FCA3E0FDA3E0FEA3E0FF30E73C75F7",
        ":2020EF00822D121FE8900426E0FCA3E0FDA3E0FEA3E0FF900426ECF4F0EDF4A3F0EEF4A36D",
        ":20210F00F0EFF4A3F0900426E02401F0A3E03400F0A3E03400F0A3E03400F090042AE4F014",
        ":20212F0090042AE0242BF531E43404F532900426E0FAA3E0FBA3E0FCA3E0FD9003F0740A28",
        ":20214F00F0E4A3F0A3F0A3F0C000E534F82404F534EDF208ECF208EBF208EAF2D0008A8257",
        ":20216F008B838CF0ED121B04A882C000A83418E2FA18E2FB18E2FC18E2FD8834D0008531CA",
        ":20218F0082853283E8F0900401740AF0E4A3F0A3F0A3F08A828B838CF0ED121CFDAC82AD73",
        ":2021AF0083AEF0FF900426ECF0EDA3F0EEA3F0EFA3F0900426E0F5F0A3E042F0A3E042F0EE",
        ":2021CF00A3E045F0601190042AE02401F0E0FFBF0A00500302212F90042AE0FF242BF58264",
        ":2021EF00E43404F583E0FEC000EFA8340534F2D0008E82121FFCAE82A83418E2FF1534C08D",
        ":20220F0000EFA8340534F2D0008E82121FE8A83418E2FF1534EFFE1490042AF0EE70B822BB",
        ":20222F00AF82AE83ADF0FC900435EFF0EEA3F0EDA3F0ECA3F0900439E4F0900439E0243AC0",
        ":20224F00FFE43404FE900435E0FAA3E0FBA3E0FCA3E0FD8A0153010F8F828E83E9F0EBC49E",
        ":20226F00CAC4540F6ACA540FCA6ACAFBECC454F04BFBEDC4CCC4540F6CCC540FCC6CCCFD54",
        ":20228F00900435EAF0EBA3F0ECA3F0EDA3F0900435E0F5F0A3E042F0A3E042F0A3E045F05F",
        ":2022AF00600E900439E02401F0E0FFBF0800408A900439E0FF243AF582E43404F583E0FE7C",
        ":2022CF00C000EFA8340534F2D0008E82121FFCAE82A83418E2FF1534C000EFA8340534F228",
        ":2022EF00D0008E82121FE8A83418E2FF1534EFFE14900439F0EE70B822AF82AE83ADF0FCC7",
        ":20230F00900442EFF0EEA3F0EDA3F0ECA3F0900446E4F0900446E02447FFE43404FE9004F9",
        ":20232F0042E0FAA3E0FBA3E0FCA3E0FD8A015301078F828E83E9F0EBC423CAC423541F6AB4",
        ":20234F00CA541FCA6ACAFBECC42354E04BFBEDC423CCC423541F6CCC541FCC6CCCFD9004B1",
        ":20236F0042EAF0EBA3F0ECA3F0EDA3F0900442E0F5F0A3E042F0A3E042F0A3E045F0601187",
        ":20238F00900446E02401F0E0FFBF0B005003022322900446E0FF2447F582E43404F583E00D",
        ":2023AF00FEC000EFA8340534F2D0008E82121FFCAE82A83418E2FF1534C000EFA83405343B",
        ":2023CF00F2D0008E82121FE8A83418E2FF1534EFFE14900446F0EE70B822AF82AE83ADF0E3",
        ":2023EF00FC900452EFF0EEA3F0EDA3F0ECA3F0900456E4F0900456E02457FFE43404FE90E1",
        ":20240F000452E0FAA3E0FBA3E0FCA3E0FD8A015301018F828E83E9F0EDC313FDEC13FCEB7F",
        ":20242F0013FBEA13FA900452F0EBA3F0ECA3F0EDA3F0900452E0F5F0A3E042F0A3E042F020",
        ":20244F00A3E045F0600E900456E02401F0E0FFBF200040A0900456E0FF2457F582E43404F3",
        ":20246F00F583E0FEC000EFA8340534F2D0008E82121FFCAE82A83418E2FF1534C000EFA88F",
        ":20248F00340534F2D0008E82121FE8A83418E2FF1534EFFE14900456F0EE70B822A83405C3",
        ":2024AF0034C533F208E8C5330534053405340534AF82AE83ADF0FCA833EFF208EEF208ED8F",
        ":2024CF00F208ECF2A8331818E2FFBF0117A833E2FC08E2FD08E2FE08E28C828D838EF01232",
        ":2024EF0023E98055A8331818E2FFBF0317A833E2FC08E2FD08E2FE08E28C828D838EF01207",
        ":20250F00222F8035A8331818E2FFBF0217A833E2FC08E2FD08E2FE08E28C828D838EF012C2",
        ":20252F0023088015A833E2FC08E2FD08E2FE08E28C828D838EF01220C8C533F818E2C533E2",
        ":20254F00883422D29C900477E599F0C298900477E0F58222C298000000D29C000000309839",
        ":20256F00FD900478E599F0C298900478E0F58222209C02D29C3098047582012275820022CB",
        ":20258F00AF82AE83ADF0FC900479EFF0EEA3F0EDA3F0ECA3F090047DE4F0900479E0FCA354",
        ":2025AF00E0FDA3E0FEA3E0FF9004B2ECF0EDA3F0EEA3F0EFA3F0900177E4F5F0122E4EAC7C",
        ":2025CF0082AD83AEF0FF9004097441F07403A3F0E4A3F0A3F08C828D838EF0EF121DBDAC24",
        ":2025EF0082AD83AEF0FF90047EECF0EDA3F0EEA3F0EFA3F090047EE0F5F0A3E042F0A3E0FD",
        ":20260F0042F0A3E045F06037C28F308FFD90047DE02401F0E0FFBF7FDB90047EE024FFFC0E",
        ":20262F00A3E034FFFDA3E034FFFEA3E034FFFF90047EECF0EDA3F0EEA3F0EFA3F080B522A7",
        ":20264F00AF82AE83ADF0FC900482EFF0EEA3F0EDA3F0ECA3F0900486E4F0900482E0FCA378",
        ":20266F00E0FDA3E0FEA3E0FF9004B2ECF0EDA3F0EEA3F0EFA3F0900003E4F5F0122E4EAC30",
        ":20268F0082AD83AEF0FF9004097408F0741AA3F0E4A3F0A3F08C828D838EF0EF121DBDAC85",
        ":2026AF0082AD83AEF0FF900487ECF0EDA3F0EEA3F0EFA3F0900487E0F5F0A3E042F0A3E02A",
        ":2026CF0042F0A3E045F06037C28F308FFD900486E02401F0E0FFBF7FDB900487E024FFFC3C",
        ":2026EF00A3E034FFFDA3E034FFFEA3E034FFFF900487ECF0EDA3F0EEA3F0EFA3F080B522DE",
        ":20270F00AF82AE83ADF0FC90048BEFF0EEA3F0EDA3F0ECA3F0C2ABC2AF0000000090048B34",
        ":20272F00E0FCA3E0FDA3E0FEA3E0FF900409ECF0EDA3F0EEA3F0EFA3F090D80075F0B87436",
        ":20274F0005121DBDAC82AD83AEF0FFE4C39CFCE49DFD74019EFEE49FFF8C8B8D8D758910EF",
        ":20276F00D28E7598C00000D2ABD2AF22759800000022A8340534C533F208E8C533053405A9",
        ":20278F003405340534AF82AE83ADF0FCA833EFF208EEF208EDF208ECF2A833E2FC08E2FD78",
        ":2027AF0008E2FE08E2FFA8331818A9340534E2F3098C828D838EF0EF1224AC153475820A83",
        ":2027CF00121FE8C533F818E2C533883422AF82AE83ADF0FC90048FEFF0EEA3F0EDA3F0EC27",
        ":2027EF00A3F090048FE0FCA3E0FDA3E0FEA3E0FF9004B2ECF0EDA3F0EEA3F0EFA3F090017F",
        ":20280F0077E4F5F0122E4EAC82AD83AEF0FF9004097441F07403A3F0E4A3F0A3F08C828DEF",
        ":20282F00838EF0EF121DBDAC82AD83AEF0FF9008D5ECF0EDA3F0EEA3F0EFA3F022AFF0AE77",
        ":20284F0083E582900494F0EEA3F0EFA3F0900497E4F0900493E06067122552AF82900498B1",
        ":20286F00EFF0BF0D24900494E0FDA3E0FEA3E0FF8D828E838FF0E4122E33900494042DF033",
        ":20288F00E43EA3F0EFA3F08036900494E0FDA3E0FEA3E0FF900498E0FC8D828E838FF0127B",
        ":2028AF002E3390049474012DF0E43EA3F0EFA3F0900493E014F0900497E02401F0809390E9",
        ":2028CF000497E0F58222A8340534C533F208E8C533053405340534AFF0AE83E582A833F23F",
        ":2028EF0008EEF208EFF2A833E2FD08E2FE08E2FFE53324FDF8E2FB08E2900493EBF08D8264",
        ":20290F008E838FF012284CC533F818E2C533883422AFF0AE83E58290049BF0EEA3F0EFA369",
        ":20292F00F090049EE4F09008D5E0FCA3E0FDA3E0FEA3E0FF90049FECF0EDA3F0EEA3F0EFC7",
        ":20294F00A3F0EC4D4E4F706E900499E0F5F0A3E045F0605E90049BE0FDA3E0FEA3E0FFC0EA",
        ":20296F0000E534F82403F534EFF208EEF208EDF2D000122563AC82A83418E2FD18E2FE18BC",
        ":20298F00E2FF88348D828E838FF0EC122E3390049B74012DF0E43EA3F0EFA3F0900499E088",
        ":2029AF0024FFFEA3E034FFFF900499EEF0EFA3F0809675820022D29C90049FE0F5F0A3E08D",
        ":2029CF0042F0A3E042F0A3E045F07003022AF1C28F208F6B3098FA9008D5E0FCA3E0FDA320",
        ":2029EF00E0FEA3E0FF90049FECF0EDA3F0EEA3F0EFA3F090049BE0FDA3E0FEA3E0FF8D82B8",
        ":202A0F008E838FF0E599122E3390049B74012DF0E43EA3F0EFA3F0C298900499E024FFFEA6",
        ":202A2F00A3E034FFFF900499EEF0EFA3F0900499E0F5F0A3E045F07098C29C7582002230EC",
        ":202A4F0098689008D5E0FCA3E0FDA3E0FEA3E0FF90049FECF0EDA3F0EEA3F0EFA3F0900475",
        ":202A6F009BE0FDA3E0FEA3E0FF8D828E838FF0E599122E3390049B74012DF0E43EA3F0EFD7",
        ":202A8F00A3F0C298900499E024FFFEA3E034FFFF900499EEF0EFA3F0900499E0F5F0A3E055",
        ":202AAF0045F07006C29C7582002290049EE02401F0E0FFBF7F0280030229C790049FE024F3",
        ":202ACF00FFFCA3E034FFFDA3E034FFFEA3E034FFFF90049FECF0EDA3F0EEA3F0EFA3F0023C",
        ":202AEF0029C7C29C7582FF22A8340534C533F208E8C533053405340534AFF0AE83E582A8F0",
        ":202B0F0033F208EEF208EFF2A833E2FD08E2FE08E2FFE53324FDF8E2FB08E2FC900499EB19",
        ":202B2F00F0ECA3F08D828E838FF0122920C533F818E2C533883422AFF0AE83E5829004A5ED",
        ":202B4F00F0EEA3F0EFA3F09004A3E0F5F0A3E045F0604B9004A3E0F5F0A3E045F0700122CD",
        ":202B6F009004A5E0FDA3E0FEA3E0FF8D828E838FF01230F1FC9004A574012DF0E43EA3F0DF",
        ":202B8F00EFA3F08C82121FE89004A3E024FFFEA3E034FFFF9004A3EEF0EFA3F080B5900430",
        ":202BAF00A5E0FDA3E0FEA3E0FF8D828E838FF01230F1602A9004A5E0FDA3E0FEA3E0FF8D7F",
        ":202BCF00828E838FF01230F1FC9004A574012DF0E43EA3F0EFA3F08C82121FE880C022A872",
        ":202BEF00340534C533F208E8C533053405340534AFF0AE83E582A833F208EEF208EFF2A85F",
        ":202C0F0033E2FD08E2FE08E2FFE53324FDF8E2FB08E2FC9004A3EBF0ECA3F08D828E838F8E",
        ":202C2F00F0122B46C533F818E2C53388342275C00122C0E0C082C083C007C0D075D00075C4",
        ":202C4F00C0019008D9E02401F0E0FFBF7F169008DAE02401F0A3E03400F0A3E03400F0A3B3",
        ":202C6F00E03400F0D0D0D007D083D082D0E032C2AF9008DAE0FCA3E0FDA3E0FEA3E0FFD22F",
        ":202C8F00AF9004B2ECF0EDA3F0EEA3F0EFA3F0900341E4F5F0122E4EAC82AD83AEF0FF901B",
        ":202CAF0004097477F07401A3F0E4A3F0A3F08C828D838EF0EF021DBDC2AF9008DAE0FCA342",
        ":202CCF00E0FDA3E0FEA3E0FFD2AF9004B2ECF0EDA3F0EEA3F0EFA3F0901A08E4F5F0122E24",
        ":202CEF004EAC82AD83AEF0FF9004097403F0E4A3F0A3F0A3F08C828D838EF0EF021DBD0074",
        ":202D0F0022E5829004A8F09004A9E4F09004A8E0FF9004A9E0FEC39F500A009004A9E024AB",
        ":202D2F0001F080ED22D2AF22C2AF22E5829004B0F0E0FFBF051A9004AEE0FEA3E0FF900440",
        ":202D4F00ACEEF0EFA3F0EE4F6003D2AD22C2AD229004B0E0FFBF06199004AEE0FEA3E0FFE3",
        ":202D6F009004AAEEF0EFA3F0EE4F6003D2AE22C2AE22000000C0D0C0E0C0F0C082C083C0AD",
        ":202D8F0000C001C002C003C004C005C006C007009004AAE0F5F0A3E045F0600E9004AAE081",
        ":202DAF00F8A3E0F5838882120039000000D007D006D005D004D003D002D001D000D083D0FD",
        ":202DCF0082D0F0D0E0D0D000000032000000C0D0C0E0C0F0C082C083C000C001C002C003B5",
        ":202DEF00C004C005C006C007009004ACE0F5F0A3E045F0600E9004ACE0F8A3E0F583888266",
        ":202E0F00120039000000D007D006D005D004D003D002D001D000D083D082D0F0D0E0D0D007",
        ":042E2F00000000326D",
        ":163117000F277F25AC242F228127E81F5225F72AEE2BDC277B27A2",
        ":093535000000000000000000008D",
        ":20007C007911E94404601B7A0590312D78CD75E704E493F2A308B8000205E7D9F4DAF27554",
        ":02009C00E7FF7C",
        ":1B2E330020F71130F6138883A88220F509F6A8837583002280FEF280F5F0229E",
        ":06006C0075E70075340188",
        ":0600C80075E7007534012C",
        ":202E4E00AF82AE83ADF0FC9004B6EFF0EEA3F0EDA3F0ECA3F09004B6E0FF9004B4E08FF0F0",
        ":202E6E00A4FFADF09004BCEFF0EDA3F09004B6E0FF9004B2E08FF0A4FFADF09004BAEFF01A",
        ":202E8E00EDA3F09004B6E0FF9004B5E08FF0A49004C1F09004B6E0FF9004B3E08FF0A4FF78",
        ":202EAE00ADF09004BFEFF0EDA3F09004BEE4F09004BAE0FCA3E0FDA3E0FEA3E0FF9004BE90",
        ":202ECE00E0F8A3E0F9A3E0FAA3E0FBE82CFCE93DFDEA3EFEEB3FFF9004BAECF0EDA3F0EE7B",
        ":202EEE00A3F0EFA3F09004BDE0FF9004B9E0FE9004B2E08EF0A42FFF9004BDF09004B8E071",
        ":202F0E00FE9004B3E08EF0A42F9004BDF09004BCE0FEA3E0FF9004B8E0FD9004B2E08DF070",
        ":202F2E00A4ABF02EFEEB3FFF9004BCEEF0EFA3F09004B7E0FD9004B3E08DF0A4ABF02EFE08",
        ":202F4E00EB3FFF9004BCEEF0EFA3F09004B7E0FF9004B4E08FF0A49004C1F09004B7E0FFA6",
        ":202F6E009004B2E08FF0A4FFADF09004BFEFF0EDA3F09004BEE4F09004BAE0FCA3E0FDA339",
        ":202F8E00E0FEA3E0FF9004BEE0F8A3E0F9A3E0FAA3E0FBE82CFCE93DFDEA3EFEEB3FFF9010",
        ":202FAE0004BAECF0EDA3F0EEA3F0EFA3F09004BAE0FCA3E0FDA3E0FEA3E08C828D838EF09C",
        ":012FCE0022E0",
        ":202FCF00AF83E5829004C4F0EFA3F09004C4E0FEA3E0FF30E709C3E49EFCE49FFD80048ED4",
        ":202FEF00048F059004C2E0FEA3E0FF33E433FB6009C3E49EF9E49FFA80048E018F029004D3",
        ":20300F00C6E9F0EAA3F0C000EBA8340534F2D0008C828D83123050AE82AF83A83418E2FB20",
        ":20302F0015349004C4E0FCA3E0FD33E4336B600CC3E49EFCE49FFD8C828D83228E828F8340",
        ":01304F00225E",
        ":2000A4007800E84400600A790175E700E4F309D8FC78CCE84403600C7904900101E4F0A33F",
        ":0400C400D8FCD9FA91",
        ":20305000AF83E5829004C8F0EFA3F09004CAE4F0A3F09004C6E0FEA3E0FF7D109004C8E0B1",
        ":20307000FBA3E0FC9004CC235401F0ECCB25E0CB33FC9004C8EBF0ECA3F09004CAE0FBA3B6",
        ":20309000E0CB25E0CB33FC9004CAEBF0ECA3F09004CCE060129004CAE0FBA3E0FC9004CAF6",
        ":2030B00074014BF0ECA3F09004CAE0FBA3E0FCC3EB9EEC9F401D9004CAEBC39EF0EC9FA31D",
        ":2030D000F09004C8E0FBA3E0FC9004C874014BF0ECA3F0DD879004C8E0FEA3E08E82F58306",
        ":0130F00022BD",
        ":20003900E473E58124FCC3C8C0E0C082E608467006E5824583601218E58296F58208E58316",
        ":1000590096428208E5F0964582D082C8D0E0C8224F",
        ":0300690075813965",
        ":0A00720012310DE582600302003632",
        ":1C30F10020F71430F6148883A88220F507E6A88375830022E280F7E49322E022EE",
        ":04310D0075820022A5",
        ":00000001FF"]

#############################################################################
# command procedures
#############################################################################
    
    _DEBUG_COUNTER_INDEX_RESET = 1
    _DEBUG_COUNTER_INDEX_SET   = 2
    _TIME_COUNTER_INDEX_RESET  = 3
    _TIME_COUNTER_INDEX_SET    = 4  
    
    def _string_to_data (self, data_string):
        if (data_string.startswith('0x')):
            data = int(data_string[2:], 16)
        else:
            data = int(data_string)
        
        return data
   
    def _do_reset_cpu (self):
        self._ocd._serial.reset_output_buffer() 
        self._ocd._serial.reset_input_buffer()        
        
        self._ocd.cpu_reset()
        
        self._ocd._serial.reset_output_buffer() 
        self._ocd._serial.reset_input_buffer()        
        
    def _do_pause_cpu (self):
        self._ocd.cpu_pause (1, 1)

    def _do_resume_cpu (self):
        self._ocd.cpu_pause (0, 1)
    
    
    def _write_code (self, addr, data):
        offset = 0
        length = len (data)
        addr_end = addr + length
        
        if (addr % 4):
            for i in range (min([(4 - (addr % 4)), length])):
                self._ocd.code_mem_write_byte (addr + offset, data[i])
                offset = offset + 1
        
        total_words = (addr_end - addr - offset) // 4
        total_128byte_frame = total_words //32
        
        for i in range (total_128byte_frame):
            self._ocd.code_mem_write_128byte (addr + offset, data[offset : offset + 128])
            offset = offset + 128
            
        
        for i in range (total_words - total_128byte_frame * 32):
            data_int = (data[offset] << 24) + \
                       (data[offset + 1] << 16) + \
                       (data[offset + 2] << 8) + \
                       (data[offset + 3])
            
            ##print ("write32bit addr = ", addr + offset, "data_int=", hex(data_int))            
            self._ocd.code_mem_write_32bit(addr + offset, data_int)
            offset = offset + 4
        
        for i in range (length - offset):
            self._ocd.code_mem_write_byte (addr + offset, data [offset])
            offset = offset + 1


    
    def _do_load_hex_file (self):
        
        if (len(self._args) == 2):
            intel_hex_file =  Intel_Hex(self._args[1])
        elif (len(self._args) == 1):
            intel_hex_file =  Intel_Hex("", 0, dummy_console._FP51_CONFIG_FIRMWARE)
            
        
        if (len (intel_hex_file.data_record_list) == 0):
            return
            
        if (len(self._args) > 2):
            try:
                f = open(self._args[2], 'w')
            except IOError:
                print ("Fail to open: ", self._args[2])
                return
                
        #self._do_pause_cpu()
        #print ("CPU paused");
        #print ("CPU reset ...")
        #self._do_reset_cpu()        
        #sleep(0.5)
        print ("Loading Program...")
        
        last_addr = intel_hex_file.data_record_list[-2].address + len(intel_hex_file.data_record_list[-1].data_list)
        len_completed = 0
        
        address = 0
        merge_data_list = []
        
        start_time = time.clock()
        print_cnt = 0
        print ("Writing | ", end="")
        for record in intel_hex_file.data_record_list:
            #print ("xxxxaddr=", record.address, "data=", record.data_list)
            
            if ((print_cnt % 64) == 0):
                print("#", end="")
                sys.stdout.flush()
                
            print_cnt = print_cnt + 1
                
            if (len(merge_data_list) == 0):
                address = record.address
                merge_data_list = record.data_list
                #print ("YY addr = ", address, " ", len (merge_data_list))
            elif ((address + len (merge_data_list)) == record.address):
                merge_data_list = merge_data_list + record.data_list
                
                #print ("WW addr = ", address, " ", len (merge_data_list))
                #print (merge_data_list)
                
                
            else:
                #print ("XXXXXXXXXXXXXXX ", address, " ", len(merge_data_list))
                self._write_code (address, merge_data_list)
                #print ("YYYYYYYYYYYYYYYY")
                
                len_completed = len_completed + len(merge_data_list)
                
                load_progress = math.ceil(len_completed * 100 / last_addr);
                if (load_progress > 100):
                    load_progress = 100
                
                #print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", end="")            
                #print ("%d%% completed" % load_progress, end="")
                
                    
                print("####", end="")
                sys.stdout.flush()
                
                if (len(self._args) > 2):
                    f.write('addr %d\n' % (address))
                    
                    for item in merge_data_list:
                        f.write('%d\n' % (item))
                        
                address = record.address
                merge_data_list = record.data_list



                
        if (len(self._args) > 2):
            f.close()
        
        end_time = time.clock()
        delta_time = end_time - start_time
        print (" | 100% {0:0.2f}s".format(delta_time))        
        self._do_resume_cpu()
        print ("\nCPU reset ...")
        self._do_reset_cpu()        
        print ("Done: ", last_addr, " Byte(s)")
        print ("CPU is runnning")
    
    
    def _do_uart_select (self):
        self._ocd.uart_select (1 - self.uart_raw_mode_enable)
        
    def _do_uart_switch (self):
        self.uart_raw_mode_enable = 1 - self.uart_raw_mode_enable
        self._ocd._serial.reset_output_buffer()    
        self._ocd._serial.reset_input_buffer()
        self._do_uart_select()
        
        self._ocd._serial.write ([ord('\r')])
        sleep(0.5)
        if (self._ocd._serial.in_waiting):
            r = self._ocd._serial.read (self._ocd._serial.in_waiting)  
            prt_out = ""
            for i in r:
                if (i < 128):
                    prt_out = prt_out + chr(i) 
            #print (prt_out, end="")
            #sys.stdout.flush()    

        
    def _do_load_hex_and_switch (self):
        self._do_load_hex_file()
        self._do_uart_switch()
        
#############################################################################
# static variables
#############################################################################
    
   
   
       
#############################################################################
# Methods
#############################################################################
  
    def __init__ (self, ocd):
        self._ocd = ocd
        self.uart_raw_mode_enable = 0
        self._do_uart_select()
        
        
        
        if (ocd._serial.in_waiting):
            r = ocd._serial.read (ocd._serial.in_waiting) # clear the uart receive buffer 
        
        self._do_pause_cpu()
        print ("CPU paused");
        sleep(0.5)
        print ("CPU reset ...")
        self._do_reset_cpu()        
        sleep(0.5)
        
        self.uart_raw_mode_enable = 0
        self._do_uart_select()
        
###############################################################################
# The M10_high_speed_config_console here implementes the command set for flash r/w.
###############################################################################
class M10_high_speed_config_console:

    _CONFIG_FLASH_INDEX_UFM1 = 0x1
    _CONFIG_FLASH_INDEX_UFM0 = 0x2
    _CONFIG_FLASH_INDEX_CFM2 = 0x3
    _CONFIG_FLASH_INDEX_CFM1 = 0x4
    _CONFIG_FLASH_INDEX_CFM0 = 0x5
    _CONFIG_FLASH_INDEX_NULL = 0x7
    
    
    _MAX_READ_WRITE_BUFFER_SIZE = 128
    
    _CONFIG_SYNC = [0x5A, 0xA5, 0x01]
    
    _CONFIG_TYPE_ACK                            = 0x34
    
    _CONFIG_TYPE_PRAM_FLASH_ERASE_WITHOUT_ACK   = 0x36;
    _CONFIG_TYPE_PRAM_FLASH_ERASE_WITH_ACK      = 0x36 | 1;
    
    _CONFIG_TYPE_PRAM_FLASH_ERASE_STATUS        = 0x38 | 1;
    
    _CONFIG_TYPE_PRAM_FLASH_WRITE_PROTECT       = 0x30 | 1; 
    
    #_CONFIG_TYPE_PRAM_FLASH_READ_WITHOUT_ACK    = 0x32;
    _CONFIG_TYPE_PRAM_FLASH_READ_WITH_ACK       = 0x32 | 1;
    
    _CONFIG_TYPE_PRAM_WRITE_4_BYTES_WITHOUT_ACK = 0x5C
    _CONFIG_TYPE_PRAM_WRITE_4_BYTES_WITH_ACK    = 0x5C | 1
    _CONFIG_TYPE_PRAM_WRITE_128_BYTES_WITH_ACK  = 0x5B
    
    _CONFIG_TYPE_PRAM_WRITE_EXT_BYTES_WITH_ACK  = 0x57
     
    
    _CONFIG_TYPE_BUF_FILL_WITH_ACK  = 0x5E
    
    _CONFIG_TYPE_PRAM_READ_4_BYTES  = 0x6D
    _CONFIG_TYPE_CPU_RESET_WITH_ACK = 0x4B
    
    _CONFIG_TYPE_PAUSE_ON_WITH_ACK  = 0x2D
    _CONFIG_TYPE_PAUSE_OFF_WITH_ACK = 0x3D
    
    _CONFIG_TYPE_READ_CPU_STATUS    = 0x2F
    
    _CONFIG_TYPE_COUNTER_CONFIG     = 0x6B
    
    _CONFIG_TYPE_BREAK_ON_WITH_ACK  = 0x7D
    _CONFIG_TYPE_BREAK_OFF_WITH_ACK = 0x1D
    
    _CONFIG_TYPE_RUN_PULSE_WITH_ACK = 0x49
    
    _CONFIG_TYPE_READ_DATA_MEM      = 0x6F 
    _CONFIG_TYPE_WRITE_DATA_MEM     = 0x2B 
    _CONFIG_TYPE_WRITE_DATA_MEM     = 0x2B 
    _CONFIG_TYPE_UART_SEL           = 0x2A
    
    _CONFIG_FRAME_REPLY_LEN = 12
    _CONFIG_SERIAL_TIME_OUT = 6
    
    _CONFIG_WRITE_EXT_FRAME_LEN     = 1024
    
    _CONFIG_TYPE_READ_CHIP_ID_LSW   = 0x45
    _CONFIG_TYPE_READ_CHIP_ID_MSW   = 0x47
    
    _CONFIG_TYPE_PRAM_WRITE_1_BYTE_WITHOUT_ACK = 0x42 
    _CONFIG_TYPE_PRAM_WRITE_1_BYTE_WITH_ACK    = 0x42 | 1
    
    _crc16_ccitt = CRC16_CCITT()
    
    _toggle = 0
    
    _CONFIG_BUF_FILL_SEGMENT_SIZE   = 2048
    _CONFIG_BUF_FILL_BUF_START_ADDR = 32768
    
    
    # borrow something from OCD
    # macro definition duplicated, Ugly code!
    _OCD_DEBUG_TYPE_READ_CPU_STATUS  = 0x2F
    _OCD_DEBUG_FRAME_REPLY_LEN = 12
    _OCD_DEBUG_SYNC = [0x5A, 0xA5, 0x01]
    
    #========================================================================
    # __init__
    #========================================================================
    def __init__ (self, com_port, baud_rate, verbose=0):
        self._serial = serial.Serial(com_port, baud_rate, timeout=M10_high_speed_config_console._CONFIG_SERIAL_TIME_OUT)
        self._verbose = verbose

    #========================================================================
    # _serial_read_clear
    #========================================================================
    def _serial_read_clear (self):
        if (self._serial.in_waiting):
            r = self._serial.read (self._serial.in_waiting)  

    #========================================================================
    # _verify_crc
    #========================================================================
    def _verify_crc (self, data):
        data_list = [i for i in data]
        crc_data = M10_high_speed_config_console._crc16_ccitt.get_crc (data_list [0 : len(data) - 2])
     
        # print ("crc: ", [hex(i) for i in crc_data])
     
        if (crc_data == data_list [len(data) - 2 : len(data)]):
            return True
        else:
            return False
    
    #========================================================================
    # zero_fill_frame
    #========================================================================
    def zero_fill_frame (self, len=64):
        frame = [0xFF, 0x00] * len
        self._serial.write (frame)

    #========================================================================
    # flash_erase
    #========================================================================
    def flash_erase (self, index, ack=1, print_enable=0):
        condition = True
        
        while (condition):
            
            if (ack):
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_FLASH_ERASE_WITH_ACK * 2 + M10_high_speed_config_console._toggle
            else:
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_FLASH_ERASE_WITHOUT_ACK * 2 + M10_high_speed_config_console._toggle
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte] + [index, 0x66]
            for i in range(4):
                frame.append (((i + 120) >> 24) & 0xFF)
  
            frame = frame + M10_high_speed_config_console._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
            if (ack):
                ret = self._serial.read (M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN)
                
                #print ("ack: ", [hex(i) for i in ret])
                
                condition = not self._verify_crc (ret)
                if (condition):
                    if (print_enable):
                        print ("flash_erase reply CRC failed, Retry!")
                    self._serial_read_clear()
                    self.zero_fill_frame(7)
            else:
                condition = False    


    #========================================================================
    # flash_erase_status
    #========================================================================
    def flash_erase_status (self, print_enable=0):
               
        condition = True
        
        t = 0
        
        while (condition):
            
            frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_FLASH_ERASE_STATUS * 2 + M10_high_speed_config_console._toggle
            
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte] + [0x66, 0x66]
            for i in range(4):
                frame.append (((i + 120) >> 24) & 0xFF)

            frame = frame + M10_high_speed_config_console._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
            ret = self._serial.read (M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN)
            #print ("status: ", [hex(i) for i in ret])
                
            condition = not self._verify_crc (ret)
            if (condition):
                if (print_enable):
                    print ("flash_erase status reply CRC failed, Retry!")
                self._serial_read_clear()
                self.zero_fill_frame(12)
            else:
                t = ret[M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN - 3]
                #print ("t = ", t)
                
        return t

    #========================================================================
    # _flash_read_short
    #========================================================================
    def _flash_read_short (self, addr, length, print_enable=0):
               
        length_save = length
        condition = True
        
        while (condition):
            
            frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_FLASH_READ_WITH_ACK * 2 + M10_high_speed_config_console._toggle
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte]
            
            for i in range(2):
                frame.append ((length >> 8) & 0xFF)
                length = length << 8
                
            for i in range(4):
                frame.append ((addr >> 24) & 0xFF)
                addr = addr << 8
                
            frame = frame + self._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
            ret = self._serial.read (length_save + len(M10_high_speed_config_console._CONFIG_SYNC) + 2) # 3 sync bytes, 2 bytes of CRC
            if (self._verbose):
                print ("receive: ", [hex(i) for i in ret])
            
            length = length_save
            
            condition = not self._verify_crc (ret)
            if (condition):
                if (print_enable):
                    print ("flash_read reply CRC failed, Retry!")
                self._serial_read_clear()
                self.zero_fill_frame(12)
            else:
                condition = False 
                
    
        ret_list = ret[len(M10_high_speed_config_console._CONFIG_SYNC) : len(M10_high_speed_config_console._CONFIG_SYNC) + length_save]
        return ret_list
        
        
    #========================================================================
    # flash_read
    #========================================================================
    def flash_read (self, addr, length, show_progress = 1):
        
        length_save = length
        ret = bytearray()
        
        
        if (addr % 4):
            ret += self._flash_read_short (addr, 4 - (addr % 4))
            addr = addr + 4 - (addr % 4)
            
            if (length <= (4 - (addr % 4))):
                length = 0
            else:
                length = length - (4 - (addr % 4))

                
        while (length):
            if (show_progress):
                
                load_progress = math.ceil((length_save - length) * 100 / length_save);
                if (load_progress > 100):
                    load_progress = 100
            
                print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", end="")            
                print ("%d%% completed         " % load_progress, end="")
                sys.stdout.flush()    
        
            
            if (length < M10_high_speed_config_console._MAX_READ_WRITE_BUFFER_SIZE):
                ret += self._flash_read_short(addr, length)
                length = 0
            else:
                ret += self._flash_read_short(addr, M10_high_speed_config_console._MAX_READ_WRITE_BUFFER_SIZE)
                length = length - M10_high_speed_config_console._MAX_READ_WRITE_BUFFER_SIZE
                addr = addr + M10_high_speed_config_console._MAX_READ_WRITE_BUFFER_SIZE
        
        return ret

    #========================================================================
    # flash_protect
    #========================================================================
    def flash_protect (self, print_enable=0):
       
        condition = True
        
        while (condition):
                       
            frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_FLASH_WRITE_PROTECT * 2 + M10_high_speed_config_console._toggle
            
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte] + [0x66, 0x66, 0x12, 0x34, 0x56, 0x78]
            
            frame = frame + self._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
           
            ret = self._serial.read (M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN)
            condition = not self._verify_crc (ret)
            if (condition):
                if (print_enable):
                    print ("\naddr=", addr, "Write protect reply CRC failed, Retry!")
                self._serial_read_clear()
                self.zero_fill_frame(14)
       
    #========================================================================
    # flash_write_byte
    #========================================================================
    def flash_write_byte (self, addr, data, ack=1, print_enable=0):
       
        condition = True
        
        while (condition):
            data_in = data
            addr_in = addr
            
            if (ack):
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_1_BYTE_WITH_ACK * 2 + M10_high_speed_config_console._toggle
            else:
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_1_BYTE_WITHOUT_ACK * 2 + M10_high_speed_config_console._toggle
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte]
            
            for i in range(4):
                frame.append ((addr_in >> 24) & 0xFF)
                addr_in = addr_in << 8
            
            frame.append (data_in & 0xFF)
            frame.append (data_in & 0xFF)
               
                
            frame = frame + self._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
            if (ack):
                ret = self._serial.read (M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN)
                condition = not self._verify_crc (ret)
                if (condition):
                    if (print_enable):
                        print ("\naddr=", addr, "Write 32bit reply CRC failed, Retry!")
                    self._serial_read_clear()
                    self.zero_fill_frame(14)
            else:
                condition = False    
    
    #========================================================================
    # flash_write_32bit
    #========================================================================
    def flash_write_32bit (self, addr, data, ack=1, print_enable=0):
       
        condition = True
        
        while (condition):
            data_in = data
            addr_in = addr
            
            if (ack):
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_4_BYTES_WITH_ACK * 2 + M10_high_speed_config_console._toggle
            else:
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_4_BYTES_WITHOUT_ACK * 2 + M10_high_speed_config_console._toggle
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte]
            
            for i in range(4):
                frame.append ((addr_in >> 24) & 0xFF)
                addr_in = addr_in << 8
            
            for i in range(4):
                frame.append ((data_in >> 24) & 0xFF)
                data_in = data_in << 8
            
            frame = frame + self._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            print ("send: ", [hex(i) for i in frame])
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
            if (ack):
                ret = self._serial.read (M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN)
                condition = not self._verify_crc (ret)
                if (condition):
                    if (print_enable):
                        print ("\naddr=", addr, "Write 32bit reply CRC failed, Retry!")
                    self._serial_read_clear()
                    self.zero_fill_frame(14)
            else:
                condition = False    
    
    #========================================================================
    #  code_mem_zero_fill_frame
    #========================================================================
    def code_mem_zero_fill_frame (self):
        frame = [0xFF, 0x00] * 64
        self._serial.write (frame)
    
    #========================================================================
    #  code_mem_write_32bit
    #========================================================================
    def code_mem_write_32bit (self, addr, data, ack=1, show_crc_error=0):
        addr_write_low_byte  = addr & 0xFF
        addr_write_high_byte = (addr >> 8) & 0xFF
        
        #print ("wr32bit, addr = ", addr)
        
        
        condition = True
        
        while (condition):
            data_in = data
            if (ack):
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_4_BYTES_WITH_ACK * 2 + M10_high_speed_config_console._toggle
            else:
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_4_BYTES_WITHOUT_ACK * 2 + M10_high_speed_config_console._toggle
            
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte] + [addr_write_high_byte, addr_write_low_byte]
            
            for i in range(4):
                frame.append ((data_in >> 24) & 0xFF)
                data_in = data_in << 8
            
            frame = frame + self._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("Ysend: ", [hex(i) for i in frame])
            
            if (ack):
                ret = self._serial.read (M10_high_speed_config_console._OCD_DEBUG_FRAME_REPLY_LEN)
                condition = not self._verify_crc (ret)
                if (condition):
                    if (show_crc_error):
                        print ("\naddr=", addr, "Write 32bit reply CRC failed, Retry!")
                    self.code_mem_zero_fill_frame()
            else:
                condition = False    

    #========================================================================
    #  code_mem_write_128byte
    #========================================================================
    def code_mem_write_128byte (self, addr, data_list, show_crc_error=0):
    
        addr_write_low_byte  = addr & 0xFF
        addr_write_high_byte = (addr >> 8) & 0xFF
        
        condition = True
        #print ("wr128, addr = ", addr)
        
        while (condition):
            frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_128_BYTES_WITH_ACK * 2 + M10_high_speed_config_console._toggle
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._OCD_DEBUG_SYNC + [frame_type_byte] + [addr_write_high_byte, addr_write_low_byte]
            frame = frame + (data_list [0:4])
            frame = frame + self._crc16_ccitt.get_crc (frame)
            frame = frame + data_list [4 : 128] + self._crc16_ccitt.get_crc (data_list [4 : 128])
            
            self._serial.write (frame)
            
          # print ("Xsend: ", [hex(i) for i in frame])
            if (self._verbose):
                print ("Xsend: ", [hex(i) for i in frame])
            
            ret = self._serial.read (M10_high_speed_config_console._OCD_DEBUG_FRAME_REPLY_LEN)

            condition = not self._verify_crc (ret)
            if (condition):
                if (show_crc_error):
                    print ("\naddr=", addr, "Write 128byte reply CRC failed, Retry!")
                self.code_mem_zero_fill_frame()
            
    #========================================================================
    #  code_mem_write_ext
    #========================================================================
    def code_mem_write_ext (self, addr, data_list, show_crc_error=0):
    
        addr_write_low_byte  = addr & 0xFF
        addr_write_high_byte = (addr >> 8) & 0xFF
        
        condition = True
        #print ("wrEXT, addr = ", addr)
        
        while (condition):
            frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_EXT_BYTES_WITH_ACK * 2 + M10_high_speed_config_console._toggle
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._OCD_DEBUG_SYNC + [frame_type_byte] + [addr_write_high_byte, addr_write_low_byte]
            frame = frame + (data_list [0:4])
            frame = frame + self._crc16_ccitt.get_crc (frame)
            frame = frame + data_list [4 : M10_high_speed_config_console._CONFIG_WRITE_EXT_FRAME_LEN] + self._crc16_ccitt.get_crc (data_list [4 : M10_high_speed_config_console._CONFIG_WRITE_EXT_FRAME_LEN])
            
            self._serial.write (frame)
            
          # print ("Xsend: ", [hex(i) for i in frame])
            if (self._verbose):
                print ("Xsend: ", [hex(i) for i in frame])
            
            ret = self._serial.read (M10_high_speed_config_console._OCD_DEBUG_FRAME_REPLY_LEN)

            condition = not self._verify_crc (ret)
            if (condition):
                if (show_crc_error):
                    print ("\naddr=", addr, "Write EXT reply CRC failed, Retry!")
                self.code_mem_zero_fill_frame()
    
    #========================================================================
    # flash_write_128byte
    #========================================================================
    def flash_write_128byte (self, addr, data_list, print_enable=0):
       
        condition = True
        #print ("wr 128, addr = ", hex(addr))
        #print (data_list)
        
        
        while (condition):
            addr_in = addr
            
            frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_PRAM_WRITE_128_BYTES_WITH_ACK * 2 + M10_high_speed_config_console._toggle
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte]
            
            for i in range(4):
                frame.append ((addr_in >> 24) & 0xFF)
                addr_in = addr_in << 8
            
            for i in range(128):
                c = data_list[i] & 0xFF
                frame.append (c)
               
            frame = frame + self._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
            ret = self._serial.read (M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN)
            condition = not self._verify_crc (ret)
            if (condition):
                if (print_enable):
                    print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\baddr= ", addr, " CRC failed, Retry!", end="")
                self._serial_read_clear()
                self.zero_fill_frame()
        
    #========================================================================
    # _flash_read_chip_id_32bit
    #========================================================================
    def _flash_read_chip_id_32bit (self, index, print_enable=0):
               
        condition = True
        
        while (condition):
            
            if (index == 0):
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_READ_CHIP_ID_LSW * 2 + M10_high_speed_config_console._toggle
            else:
                frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_READ_CHIP_ID_MSW * 2 + M10_high_speed_config_console._toggle
                
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte] + [0x01, 0x02, 0x03, 0x04, 0x05, 0x06]
                            
            frame = frame + self._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
            ret = self._serial.read (M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN)
            
            if (self._verbose):
                print ("receive: ", [hex(i) for i in ret])
            
            condition = not self._verify_crc (ret)
            if (condition):
                
                if (print_enable):
                    print ("flash_read chip id 32 bit CRC failed, Retry!")
                self._serial_read_clear()
                self.zero_fill_frame(12)
                condition = False
            else:
                condition = False 
                
        version  = ret[len(M10_high_speed_config_console._CONFIG_SYNC) + 1 : len(M10_high_speed_config_console._CONFIG_SYNC) + 3]
        ret_list = ret[len(M10_high_speed_config_console._CONFIG_SYNC) + 3 : len(M10_high_speed_config_console._CONFIG_SYNC) + 7]
        return (version, ret_list)
        
    #========================================================================
    # _start_buf_fill
    #========================================================================
    def _start_buf_fill (self, address, length, print_enable=0):
               
        condition = True
        
        while (condition):
            
            frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_BUF_FILL_WITH_ACK * 2 + M10_high_speed_config_console._toggle
                
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
                       
            
            frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte]
            
            for i in range(2):
                frame.append ((length >> 8) & 0xFF)
                length = length << 8
            
            for i in range(4):
                frame.append ((address >> 24) & 0xFF)
                address = address << 8
                                        
            frame = frame + self._crc16_ccitt.get_crc (frame)
            self._serial.write (frame)
            
            if (self._verbose):
                print ("send: ", [hex(i) for i in frame])
            
            ret = self._serial.read (M10_high_speed_config_console._CONFIG_FRAME_REPLY_LEN)
            
            if (self._verbose):
                print ("receive: ", [hex(i) for i in ret])
            
            condition = not self._verify_crc (ret)
            if (condition):
                
                if (print_enable):
                    print ("flash_buf_fill CRC failed, Retry!")
                self._serial_read_clear()
                self.zero_fill_frame(12)
                condition = False
            else:
                condition = False 
               
        
    #========================================================================
    # flash_read_chip_id
    #========================================================================
    def flash_read_chip_id (self):
        (mcu_version, chip_id_lsw)      = self._flash_read_chip_id_32bit(0)
        (firmware_version, chip_id_msw) = self._flash_read_chip_id_32bit(1)
        
        return (chip_id_msw, chip_id_lsw, mcu_version, firmware_version)
        
    #========================================================================
    # uart_port_select
    #========================================================================
    def uart_port_select (self, cpu0_ocd1):
    
        frame_type_byte = M10_high_speed_config_console._CONFIG_TYPE_UART_SEL * 2 + M10_high_speed_config_console._toggle;
        M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
        frame = M10_high_speed_config_console._CONFIG_SYNC + [frame_type_byte] + [0x12, 0x34, 0xab, 0xcd, 0xab, cpu0_ocd1*2]
        frame = frame + self._crc16_ccitt.get_crc (frame)
            
        if (self._verbose):
            print ("send: ", [hex(i) for i in frame])
            
        self._serial.write (frame)

    #========================================================================
    # read_cpu_status
    #========================================================================
        
    def read_cpu_status (self):
        condition = True
        while (condition):
        
            frame_type_byte = M10_high_speed_config_console._OCD_DEBUG_TYPE_READ_CPU_STATUS * 2 + M10_high_speed_config_console._toggle;
            M10_high_speed_config_console._toggle = 1 - M10_high_speed_config_console._toggle
            
            frame = M10_high_speed_config_console._OCD_DEBUG_SYNC + [frame_type_byte] + [0x12, 0x34, 0xab, 0xcd, 0xab, 0xcd]
            frame = frame + self._crc16_ccitt.get_crc (frame)
            
            self._serial.write (frame)
            ret = self._serial.read (M10_high_speed_config_console._OCD_DEBUG_FRAME_REPLY_LEN)
            
            condition = not self._verify_crc (ret)
            if (condition):
                print ("ocd read status reply CRC fail")
            
            ret_list = [i for i in ret]
     
                        
            PC = ret_list [M10_high_speed_config_console._OCD_DEBUG_FRAME_REPLY_LEN - 4] * 256 + ret_list [M10_high_speed_config_console._OCD_DEBUG_FRAME_REPLY_LEN - 3]
       
        return PC
  
    #========================================================================
    # _do_write_buffer_fill_one_segment
    #========================================================================
    def _do_write_buffer_fill_one_segment (self, addr, data_segment):
        num_of_loop = len(data_segment) // M10_high_speed_config_console._CONFIG_WRITE_EXT_FRAME_LEN
          
        #print ("addr= ", hex(addr))
        #print ("len = ", len(data_segment))
        #print (" num_of_loop ", num_of_loop)       
        #print ([hex(i) for i in data_segment[0:16]])
     
        for i in range(num_of_loop):
        
            self.code_mem_write_ext (addr,  \
              data_segment[i * M10_high_speed_config_console._CONFIG_WRITE_EXT_FRAME_LEN :     \
                             (i + 1) * M10_high_speed_config_console._CONFIG_WRITE_EXT_FRAME_LEN])
            #print ("addr = ", addr)
            PC = self.read_cpu_status ()
                
            addr = addr + M10_high_speed_config_console._CONFIG_WRITE_EXT_FRAME_LEN                 
       
  
    #========================================================================
    # _do_write_buffer_fill
    #========================================================================
    def _do_write_buffer_fill (self, data_list_to_write):
        self.uart_port_select (1)
        addr = M10_high_speed_config_console._CONFIG_BUF_FILL_BUF_START_ADDR
        
        num_of_loops = len (data_list_to_write) // M10_high_speed_config_console._CONFIG_BUF_FILL_SEGMENT_SIZE

        for i in range(num_of_loops):
            
            condition = True
            while (condition):
                PC = self.read_cpu_status ()
                #print ("i = ", i, "PC = ", PC)
                print ("#", end="")
                sys.stdout.flush()
                
                if (((i % 2) == 0) and (PC & 8) and ((PC & 2) == 0) ):
                    condition = False
                
                if (((i % 2) == 1) and (PC & 8) and ((PC & 1) == 0) ):
                    condition = False
                            
            
            self._do_write_buffer_fill_one_segment(addr, \
                 data_list_to_write [i * M10_high_speed_config_console._CONFIG_BUF_FILL_SEGMENT_SIZE : \
                                     (i + 1) * M10_high_speed_config_console._CONFIG_BUF_FILL_SEGMENT_SIZE])
            
            if (addr == M10_high_speed_config_console._CONFIG_BUF_FILL_BUF_START_ADDR):
                addr = addr + M10_high_speed_config_console._CONFIG_BUF_FILL_SEGMENT_SIZE
            else:
                addr = M10_high_speed_config_console._CONFIG_BUF_FILL_BUF_START_ADDR
        
        print ("\n")
        sys.stdout.flush()
                
        self.uart_port_select (0)
        
       
###############################################################################
# The Console to configure M10 board
###############################################################################

class Mustang_Console:
    
#############################################################################
# command procedures
#############################################################################

    #========================================================================
    # _string_to_data
    #========================================================================
    def _string_to_data (self, data_string):
                
        if (data_string.startswith('0x')):
            data = int(data_string[2:], 16)
        else:
            for i in data_string:
                if ((ord(i) < ord('0')) or (ord(i) > ord('9'))):
                    return -1
            data = int(data_string)
        
        return data

    #========================================================================
    # _read_flash
    #========================================================================
    def _read_flash (self, addr, length):
        #print ("read flash, addr = ", addr, "length = ", length)
        return self._M10_high_speed_config_console.flash_read(addr, length)

    #========================================================================
    # _get_flash_addr_len
    #========================================================================
    def _get_flash_addr_len (self, flash):
        
        #if (flash.lower() == "cfm0"):
        #    addr = 0x0002B000
        #    default_len = 143360
        #    start_flash_index = 5
        #    num_of_flash_sector = 1
        #elif (flash.lower() == "cfm1"):
        if (flash.lower() == "cfm"):
            #addr = 0x00008000
            default_len = 143360
            flash_index = [3, 4]
            start_addr = [0x00008000, 0x0001c800]
            flash_size = [83968, 59392]        
            #num_of_flash_sector = 2
        else:
            #addr = 0x00004000
            default_len = 32768
            flash_index = [1, 2]
            ## start_addr = [0x00004000]
            start_addr = [0x00000000, 0x00004000]
            flash_size = [16384, 16384]
            #num_of_flash_sector = 1
            
        return (start_addr, default_len, flash_index, flash_size)

    #========================================================================
    # _print_spin
    #========================================================================
    def _print_spin(self):
        self._spin_counter = (self._spin_counter + 1) % 4
        print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", end="")
        if (self._spin_counter == 0):
            print ("|", end="")
        elif (self._spin_counter == 1):
            print ("/", end="")
        elif (self._spin_counter == 2):
            print ("-", end="")
        else:
            print ("\\", end="")
        
        sleep(0.5)

    #========================================================================
    # _do_read_flash
    #========================================================================
    def _do_read_flash (self):
        
        ret_data = bytearray()
        file_name = ""
        
        if (len(self._args) < 2):
            print ("Not enough number of arguments")
            return ret_data 
            
        flash = self._args[1]
        
        (start_addr, default_len, flash_index, flash_size) = self._get_flash_addr_len (flash)
        
        if (len(self._args) < 3):
            length = default_len
        else:
            length = self._string_to_data(self._args[2])
            if (length == 0):
                length = default_len
            elif (length == -1):
                length = default_len
                file_name = self._args[2]
                
        if (len(self._args) > 3):
            file_name = self._args[3]
            
        ret_data = self._read_flash (start_addr[0], length)
        
        if (file_name):
            print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", end="")            
            print ("Save data to", file_name)
            f = open(file_name, 'wb')
            f.write(ret_data)
            f.close()
        else:
            print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", end="")
            print ("==> addr:", hex(start_addr[0]))
            print ("==> data:", [hex(i) for i in ret_data])
    
    #========================================================================
    # _do_erase_flash_by_index
    #========================================================================
    def _do_erase_flash_by_index (self, flash_index):
    
        
        self._M10_high_speed_config_console.flash_erase (flash_index)
        
        loop_condition = 1
        while(loop_condition):
            t = self._M10_high_speed_config_console.flash_erase_status ()
            if ((t & 0x3) != 1):
                loop_condition = 0
            else:
                self._print_spin()
        
        print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", end="")            
    
    #========================================================================
    # _do_erase_flash
    #========================================================================
    def _do_erase_flash (self):
        if (len(self._args) < 2):
            print ("Not enough number of arguments")
            return
        
        flash = self._args[1]
        
        (start_addr, default_len, flash_index, flash_size) = self._get_flash_addr_len (flash)
        
        for i in flash_index:
            self._do_erase_flash_by_index(i)

    #========================================================================
    # _do_write_flash
    #========================================================================
    def _do_write_flash (self):
        if (len(self._args) < 4):
            print ("Not enough number of arguments")
            return
        
        flash = self._args[1]
        
        (start_addr, default_len, flash_index, flash_size) = self._get_flash_addr_len (flash)
        
        offset = self._string_to_data(self._args[2])
        data   = self._string_to_data(self._args[3])

        self._M10_high_speed_config_console.flash_write_32bit(start_addr + offset, data)    

    #========================================================================
    # _bit_reverse_8bit
    #========================================================================
    def _bit_reverse_8bit (self, data_byte):
        x = data_byte
        x = (((x & 0xF0)>>4)|((x & 0x0F)<<4))
        x = (((x & 0xCC)>>2)|((x & 0x33)<<2))
        x = (((x & 0xAA)>>1)|((x & 0x55)<<1))
        
        return x

    #========================================================================
    # _write_data_list
    #========================================================================
    def _write_data_list (self, addr, data, data_list):
        offset = 0
        length = len (data)
        
        data_list [addr : addr + length] = data[:]
        
    #========================================================================
    # _endian_data_list
    #========================================================================
    def _endian_data_list (self, data_list):
        
        num_of_loops = len(data_list) // 4
        for i in range (num_of_loops):
            t0 = data_list[i * 4]
            t1 = data_list[i * 4 + 1]
            t2 = data_list[i * 4 + 2]
            t3 = data_list[i * 4 + 3]
            
            data_list[i * 4]     = t3
            data_list[i * 4 + 1] = t2
            data_list[i * 4 + 2] = t1
            data_list[i * 4 + 3] = t0
            
            
            
    #========================================================================
    # _write_data_block
    #========================================================================
    def _write_data_block (self, addr, data, print_enable=0):
        offset = 0
        length = len (data)
        addr_end = addr + length
        
        len_data = len (data)
        if (len_data % 4):
            for i in range(4 - (len_data % 4)):
                data = data + [0]
        
        data_back = data[:] # copy the list
        
        len_data = len (data)
        for i in range (len_data // 4):
            data [i * 4]     = self._bit_reverse_8bit(data_back [i * 4 + 3])
            data [i * 4 + 1] = self._bit_reverse_8bit(data_back [i * 4 + 2])
            data [i * 4 + 2] = self._bit_reverse_8bit(data_back [i * 4 + 1])
            data [i * 4 + 3] = self._bit_reverse_8bit(data_back [i * 4])
            
        
        if (addr % 4):
            for i in range (min([(4 - (addr % 4)), length])):
                self._M10_high_speed_config_console.flash_write_byte (addr + offset, data[i])
                offset = offset + 1
        
        total_words = (addr_end - addr - offset) // 4
        total_128byte_frame = total_words //32
        
        count = 0
        for i in range (total_128byte_frame):
            if ((count % 4) == 0):
                print ("#", end="")
                sys.stdout.flush()
            count = count + 1
             
            
            self._M10_high_speed_config_console.flash_write_128byte(addr + offset, data[offset : offset + 128])
            offset = offset + 128
            
        
        for i in range (total_words - total_128byte_frame * 32):
            data_int = (data[offset] << 24) + \
                       (data[offset + 1] << 16) + \
                       (data[offset + 2] << 8) + \
                       (data[offset + 3])
            
            ##print ("write32bit addr = ", addr + offset, "data_int=", hex(data_int))            
            self._M10_high_speed_config_console.flash_write_32bit(addr + offset, data_int)
            offset = offset + 4
        
        for i in range (length - offset):
            self._M10_high_speed_config_console.flash_write_byte (addr + offset, data [offset])
            offset = offset + 1
    
    #========================================================================
    # _do_load_bin_file
    #========================================================================
    def _do_load_bin_file (self):
        if (len(self._args) < 3):
            print ("Not enough number of arguments")
            return
        
        print ("Load as binary format")
        flash = self._args[1]
        (start_addr, default_len, flash_index, flash_size) = self._get_flash_addr_len (flash)
        
        
        data_list = bytearray()      
    
        count = 0
        try:
            f = open(self._args[2], 'rb')
            byte = f.read(1)
            while byte:
                data_list += byte
                count = count + 1
                byte = f.read(1)
                
        except IOError:
            print ("Fail to open: ", self._args[2])
            return
                    
        f.close()    
        
        if (count != default_len):
            print ("Acutal File Size", count, "not matching the expected length of ", default_len)
            
        
        print ("Loading...", self._args[2], " ", count, " bytes\n")
        
        data_list_to_write = [self._bit_reverse_8bit(i) for i in data_list]
            
        if (len(data_list_to_write) < default_len):
            data_list_to_write = data_list_to_write + [0] * (default_len - len(data_list_to_write))
        elif (len(data_list_to_write) > default_len):
            data_list_to_write = data_list_to_write[0 : default_len]
     
        offset = 0
        for i in range (len(flash_index)):
            print ("Erasing...", self._args[1], ", flash index:",  flash_index[i])   
            self._do_erase_flash_by_index(flash_index[i])
            
            print ("Loading...", self._args[2], ", start addr:", start_addr[i], ", flash size: ", flash_size[i])
        
            self._M10_high_speed_config_console._start_buf_fill (start_addr[i], \
              flash_size[i] // self._M10_high_speed_config_console._CONFIG_BUF_FILL_SEGMENT_SIZE )        
        
            self._M10_high_speed_config_console._do_write_buffer_fill (data_list_to_write [offset : offset + flash_size[i]])
            offset = offset + flash_size[i]
            
        self._M10_high_speed_config_console.flash_protect()
        print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", end="")            
        print ("File Loading Done, Flash is now write protected")
        sys.stdout.flush()
                
        
        
         
    

    #========================================================================
    # _do_load_hex_file
    #========================================================================
    def _do_load_hex_file (self):
        
        if (len(self._args) < 3):
            print ("Not enough number of arguments")
            return
        
        print ("Load as hex format\n")
        flash = self._args[1]
        (start_addr, default_len, flash_index, flash_size) = self._get_flash_addr_len (flash)
        
        data_list_to_write = [0] * default_len
        
        intel_hex_file =  Intel_Hex(self._args[2])
        
        if (len (intel_hex_file.data_record_list) == 0):
            return
            
        
        last_addr = intel_hex_file.data_record_list[-2].address + len(intel_hex_file.data_record_list[-1].data_list)
        len_completed = 0
        
        address = 0
        merge_data_list = []
        
        
        for record in intel_hex_file.data_record_list:
            #print ("xxxxaddr=", record.address, "data=", record.data_list)
            if (len(merge_data_list) == 0):
                address = record.address
                merge_data_list = record.data_list
                #print ("YY addr = ", address, " ", len (merge_data_list))
            elif ((address + len (merge_data_list)) == record.address):
                merge_data_list = merge_data_list + record.data_list
                
            else:
                #self._write_data_block (address + start_addr[0], merge_data_list)
                self._write_data_list (address, merge_data_list, data_list_to_write)
                len_completed = len_completed + len(merge_data_list)
                
                address = record.address
                merge_data_list = record.data_list

        self._endian_data_list (data_list_to_write)       
        #print ([hex(i) for i in data_list_to_write[0:16]])        
        
        offset = 0
        for i in range (len(flash_index)):
            print ("Erasing...", self._args[1], ", flash index:",  flash_index[i])   
            self._do_erase_flash_by_index(flash_index[i])
            
            print ("Loading...", self._args[2], ", start addr:", start_addr[i], ", flash size: ", flash_size[i])
        
            self._M10_high_speed_config_console._start_buf_fill (start_addr[i], \
              flash_size[i] // self._M10_high_speed_config_console._CONFIG_BUF_FILL_SEGMENT_SIZE )        
        
            self._M10_high_speed_config_console._do_write_buffer_fill (data_list_to_write [offset : offset + flash_size[i]])
            
            offset = offset + flash_size[i]
            
        self._M10_high_speed_config_console.flash_protect()
        print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b", end="")            
        print ("File Loading Done, Flash is now write protected")
        sys.stdout.flush()
        
    #========================================================================
    # _do_load
    #========================================================================
    def _do_load(self):
        
        if (len(self._args) < 3):
            print ("Not enough number of arguments")
            return
        
        flash = self._args[1]
        
        if (flash.lower() == "cfm"):
            self._do_load_bin_file()
        else:
            self._do_load_hex_file()
    
    
#############################################################################
# static variables
#############################################################################
    
    _Mustang_Console_PROMPT = "\n>> "

    #========================================================================
    # _do_help
    #========================================================================
    def _do_help (self):
         if (len(self._args) > 1):
            if (self._args[1] in Mustang_Console._MUSTANG_CONSOLE_CMD):
                print ("Usage:\n      ", self._args[1], Mustang_Console._MUSTANG_CONSOLE_CMD[self._args[1]][1])
                print ("Description:\n      ", Mustang_Console._MUSTANG_CONSOLE_CMD[self._args[1]][2])
                
            else:
                print ("Unknow command")        
         else:
            print ("available commands:")
            for key, value in Mustang_Console._MUSTANG_CONSOLE_CMD.items():
                print (" ", key)

    #========================================================================
    # _dummy_exit
    #------------------------------------------------------------------------
    # Remarks:
    #    This function never gets called. But need this as a place holder 
    # for tools that can convert python script into .exe files.
    #========================================================================
    def _dummy_exit (self):
        None
        
    _MUSTANG_CONSOLE_CMD = {
        'help'                  : (_do_help,              "[command_to_look_up]", "list command info"), 
        'read'                  : (_do_read_flash,        "(CFM|UFM) [length] [file_name_to_save]", "read flash content"), 
        'erase'                 : (_do_erase_flash,       "(CFM|UFM)", "erase flash content"),
       # 'write'                : (_do_write_flash,       "(CFM|UFM) offset data", "write a word to flash"),
       # 'load_bin'             : (_do_load_bin_file,     "(CFM|UFM) binary_file_name", "load binary file to flash"),
       # 'load_hex'             : (_do_load_hex_file,     "(CFM|UFM) hex_file_name", "load hex file to flash"),
        'load'                  : (_do_load,     "(CFM|UFM) file_name", "load file to flash"),
        'exit'                  : (_dummy_exit,             " ", "exit console")
    }
    
 
   
       
#############################################################################
# Methods
#############################################################################
  
    #========================================================================
    # __init__
    #========================================================================
    def __init__ (self, M10_high_speed_config_console):
        self._M10_high_speed_config_console = M10_high_speed_config_console
        if (M10_high_speed_config_console._serial.in_waiting):
            r = M10_high_speed_config_console._serial.read (M10_high_speed_config_console._serial.in_waiting) # clear the uart receive buffer 
            
        self._stdin = Console_Input(">> ", Mustang_Console._MUSTANG_CONSOLE_CMD.keys())
        self._stdin.uart_raw_mode_enable = 0
        self._spin_counter = 0

    #========================================================================
    # _execute_cmd
    #========================================================================
    def _execute_cmd (self):
        #try:
            Mustang_Console._MUSTANG_CONSOLE_CMD[self._args[0]][0](self)
        #except Exception:
         #   print ("Exception when executing", self._args[0])
            
    #========================================================================
    # _line_handle
    #========================================================================
    def _line_handle (self, line):
        
        #try:
        self._args = line.split()
        
        if (len(self._args) == 0):
            print ("empty line!");
        elif (self._args[0] not in Mustang_Console._MUSTANG_CONSOLE_CMD):
            print ("unknown command ", self._args[0]);
        else:
            #print ("Execute command: ", line.strip());
            self._execute_cmd ()
        #except Exception:
         #   print ("eeeeeeeeeeeeeeeeeeee\n", end="");
        
        
    #########################################################################
    # This is the main loop    
    #########################################################################
    def run (self):
        while(1):
            try:
                line = self._stdin.input()
                if (line == "exit"):
                    print ("\nGoodbye!!!")
                    return
            except Exception:
                print ("type \"exit\" to end console session \n", end="");

            self._M10_high_speed_config_console._serial.reset_input_buffer()
            self._line_handle (line)
            



#==============================================================================
# main            
#==============================================================================

if __name__ == "__main__":

    baud_rate = 921600
    com_port = "COM5"
    image_file = ""
    raw_uart_switch = 0
    cfm_image = ""
    ufm_image = ""

    #=========================================================================
    # print banner
    #=========================================================================
    
    print ("===============================================================================")
    print ("# Copyright (c) 2017, PulseRain Technology LLC ")
    print ("# M10 high speed Configuration Utility, Version 1.0")
    
    
    #=========================================================================
    # get command line options
    #=========================================================================
    
    try:
          opts, args = getopt.getopt(sys.argv[1:],"hP:b:U:",["CFM=", "UFM="])
    except (getopt.GetoptError, err):
          print (str(err))
          sys.exit(1)
    
    for opt, args in opts:
        if opt in ('-b'): ex
            baud_rate = int (args)
        elif opt in ('-P'):
            com_port = args
        elif opt in ('-U'):
            image_file = args
        elif opt in ('--CFM'):
            cfm_image = args
        elif opt in ('--UFM'):
            ufm_image = args
        else:
            print ("Usage:\n  py M10_high_speed_config.py -P comport [-U new_nios_hex_file | -b baud_rate]")
            print ("  Options: \n    -U: replace default nios image with a new one\n    -b: baud rate in bps \n    -h print usage")
            print ("\n    --CFM=image file for CFM \n    --UFM=image_file for UFM")
            print ("\n  Example: using com port 7, baud rate 921600, default FP51-1T image")
            print ("           py M10_high_speed_config.py -P COM7 -b 921600")
            sys.exit(1)
            
    print ("===============================================================================")
    print ("baud_rate  = ", baud_rate)
    print ("com_port   = ", com_port)
    if (image_file == ""):
        print ("using built-in image")
    else:
        print ("image file = ", image_file)
    print ("===============================================================================")

    try:
        ocd = OCD_8051 (com_port, baud_rate, verbose=0)
    except:
        print ("Failed to open COM port")
        sys.exit(1)


    #=========================================================================
    # Load Program
    #=========================================================================
    
    console = dummy_console(ocd)
   
    if (image_file):
        console._args = ("load_hex_and_switch " + image_file).split()
        console._do_load_hex_and_switch ()
        
    elif (raw_uart_switch):
        console._do_uart_switch()
    else:
        console._args = ("load_hex_and_switch ").split()
        console._do_load_hex_and_switch ()
  
    ocd._serial.close()    
    
    try:
        M10_high_speed_config_console = M10_high_speed_config_console (com_port, baud_rate, verbose=0)
    except:
        print ("Failed to open COM port")
        sys.exit(1)


    
        
    #=========================================================================
    # Get chip id
    #=========================================================================
    print ("===============================================================================")
    print ("Initializing...", end="")
    sys.stdout.flush()
    M10_high_speed_config_console._serial.reset_output_buffer() 
    M10_high_speed_config_console._serial.reset_input_buffer()    
    M10_high_speed_config_console.uart_port_select(0)

    
    sleep(0.5)
    #M10_high_speed_config_console.zero_fill_frame()
    #M10_high_speed_config_console.zero_fill_frame()
    
    

    (chip_id_msw, chip_id_lsw, mcu_version, firmware_version) = M10_high_speed_config_console.flash_read_chip_id()
    chip_id = chip_id_msw + chip_id_lsw
    
    print ("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bChip ID         : ", end="")
    
    
    
    count = 0
    for i in chip_id_msw:
        print (format(i, '02X'), end="")
        if (count == 1):
            print ("-", end="")
        count = count + 1
            
    print ("-", end="")
        
    count = 0
    for i in chip_id_lsw:
        print (format(i, '02X'), end="")
        if (count == 1):
            print ("-", end="")
        count = count + 1

    print ("\nMCU Version     : ", end="")
    for i in mcu_version[1:]:
        print (format(i, '02X'), end="")
   
    print ("\nFirmware Version: ", end="")
    for i in firmware_version:
        print (format(i, '02X'), end="")
   
        
    #=========================================================================
    # configuration console
    #=========================================================================
    
    print (" ")
    print ("===============================================================================")
    
    print (" Please type in command to configure the device. \n Use help to see the list of available commands.")     
    console = Mustang_Console(M10_high_speed_config_console)
    
    #=========================================================================
    # load CFM or UFM image for command line
    #=========================================================================
    if (cfm_image):
        print ("CFM Image load: ", cfm_image)
        console._args = ["", "CFM", cfm_image]
        console._do_load()
    elif (ufm_image):
        print ("UFM Image load: ", ufm_image)
        console._args = ["", "UFM", ufm_image]
        console._do_load()
    else:
        console.run()
